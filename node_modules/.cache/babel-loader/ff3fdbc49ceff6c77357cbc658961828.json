{"ast":null,"code":"/**\n * pokersolver v2.1.2\n * Copyright (c) 2016, James Simpson of GoldFire Studios\n * http://goldfirestudios.com\n */\n(function () {\n  'use strict'; // NOTE: The 'joker' will be denoted with a value of 'O' and any suit.\n\n  var values = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];\n  /**\n   * Base Card class that defines a single card.\n   */\n\n  class Card {\n    constructor(str) {\n      this.value = str.substr(0, 1);\n      this.suit = str.substr(1, 1).toLowerCase();\n      this.rank = values.indexOf(this.value);\n      this.wildValue = str.substr(0, 1);\n    } // TODO: Add a parameter to leave out the suit and update the this.descr calls.\n\n\n    toString() {\n      return this.wildValue.replace('T', '10') + this.suit;\n    }\n\n    static sort(a, b) {\n      if (a.rank > b.rank) {\n        return -1;\n      } else if (a.rank < b.rank) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n\n  }\n  /**\n   * Base Hand class that handles comparisons of full hands.\n   */\n\n\n  class Hand {\n    constructor(cards, name, game, canDisqualify) {\n      this.cardPool = [];\n      this.cards = [];\n      this.suits = {};\n      this.values = [];\n      this.wilds = [];\n      this.name = name;\n      this.game = game;\n      this.sfLength = 0;\n      this.alwaysQualifies = true; // Qualification rules apply for dealer's hand.\n      // Also applies for single player games, like video poker.\n\n      if (canDisqualify && this.game.lowestQualified) {\n        this.alwaysQualifies = false;\n      } // Get rank based on game.\n\n\n      var handRank = this.game.handValues.length;\n\n      for (var i = 0; i < this.game.handValues.length; i++) {\n        if (this.game.handValues[i] === this.constructor) {\n          break;\n        }\n      }\n\n      this.rank = handRank - i; // Set up the pool of cards.\n\n      this.cardPool = cards.map(function (c) {\n        return typeof c === 'string' ? new Card(c) : c;\n      }); // Fix the card ranks for wild cards, and sort.\n\n      for (var i = 0; i < this.cardPool.length; i++) {\n        card = this.cardPool[i];\n\n        if (card.value === this.game.wildValue) {\n          card.rank = -1;\n        }\n      }\n\n      this.cardPool = this.cardPool.sort(Card.sort); // Create the arrays of suits and values.\n\n      var obj, obj1, key, key1, card;\n\n      for (var i = 0; i < this.cardPool.length; i++) {\n        // Make sure this value already exists in the object.\n        card = this.cardPool[i]; // We do something special if this is a wild card.\n\n        if (card.rank === -1) {\n          this.wilds.push(card);\n        } else {\n          (obj = this.suits)[key = card.suit] || (obj[key] = []);\n          (obj1 = this.values)[key1 = card.rank] || (obj1[key1] = []); // Add the value to the array for that type in the object.\n\n          this.suits[card.suit].push(card);\n          this.values[card.rank].push(card);\n        }\n      }\n\n      this.values.reverse();\n      this.isPossible = this.solve();\n    }\n    /**\n     * Compare current hand with another to determine which is the winner.\n     * @param  {Hand} a Hand to compare to.\n     * @return {Number}\n     */\n\n\n    compare(a) {\n      if (this.rank < a.rank) {\n        return 1;\n      } else if (this.rank > a.rank) {\n        return -1;\n      }\n\n      var result = 0;\n\n      for (var i = 0; i <= 4; i++) {\n        if (this.cards[i] && a.cards[i] && this.cards[i].rank < a.cards[i].rank) {\n          result = 1;\n          break;\n        } else if (this.cards[i] && a.cards[i] && this.cards[i].rank > a.cards[i].rank) {\n          result = -1;\n          break;\n        }\n      }\n\n      return result;\n    }\n    /**\n     * Determine whether a hand loses to another.\n     * @param  {Hand} hand Hand to compare to.\n     * @return {Boolean}\n     */\n\n\n    loseTo(hand) {\n      return this.compare(hand) > 0;\n    }\n    /**\n     * Determine the number of cards in a hand of a rank.\n     * @param  {Number} val Index of this.values.\n     * @return {Number} Number of cards having the rank, including wild cards.\n     */\n\n\n    getNumCardsByRank(val) {\n      var cards = this.values[val];\n      var checkCardsLength = cards ? cards.length : 0;\n\n      for (var i = 0; i < this.wilds.length; i++) {\n        if (this.wilds[i].rank > -1) {\n          continue;\n        } else if (cards) {\n          if (this.game.wildStatus === 1 || cards[0].rank === values.length - 1) {\n            checkCardsLength += 1;\n          }\n        } else if (this.game.wildStatus === 1 || val === values.length - 1) {\n          checkCardsLength += 1;\n        }\n      }\n\n      return checkCardsLength;\n    }\n    /**\n     * Determine the cards in a suit for a flush.\n     * @param  {String} suit Key for this.suits.\n     * @param  {Boolean} setRanks Whether to set the ranks for the wild cards.\n     * @return {Array} Cards having the suit, including wild cards.\n     */\n\n\n    getCardsForFlush(suit, setRanks) {\n      var cards = (this.suits[suit] || []).sort(Card.sort);\n\n      for (var i = 0; i < this.wilds.length; i++) {\n        var wild = this.wilds[i];\n\n        if (setRanks) {\n          var j = 0;\n\n          while (j < values.length && j < cards.length) {\n            if (cards[j].rank === values.length - 1 - j) {\n              j += 1;\n            } else {\n              break;\n            }\n          }\n\n          wild.rank = values.length - 1 - j;\n          wild.wildValue = values[wild.rank];\n        }\n\n        cards.push(wild);\n        cards = cards.sort(Card.sort);\n      }\n\n      return cards;\n    }\n    /**\n     * Resets the rank and wild values of the wild cards.\n     */\n\n\n    resetWildCards() {\n      for (var i = 0; i < this.wilds.length; i++) {\n        this.wilds[i].rank = -1;\n        this.wilds[i].wildValue = this.wilds[i].value;\n      }\n    }\n    /**\n     * Highest card comparison.\n     * @return {Array} Highest cards\n     */\n\n\n    nextHighest() {\n      var picks;\n      var excluding = [];\n      excluding = excluding.concat(this.cards);\n      picks = this.cardPool.filter(function (card) {\n        if (excluding.indexOf(card) < 0) {\n          return true;\n        }\n      }); // Account for remaining wild card when it must be ace.\n\n      if (this.game.wildStatus === 0) {\n        for (var i = 0; i < picks.length; i++) {\n          var card = picks[i];\n\n          if (card.rank === -1) {\n            card.wildValue = 'A';\n            card.rank = values.length - 1;\n          }\n        }\n\n        picks = picks.sort(Card.sort);\n      }\n\n      return picks;\n    }\n    /**\n     * Return list of contained cards in human readable format.\n     * @return {String}\n     */\n\n\n    toString() {\n      var cards = this.cards.map(function (c) {\n        return c.toString();\n      });\n      return cards.join(', ');\n    }\n    /**\n     * Return array of contained cards.\n     * @return {Array}\n     */\n\n\n    toArray() {\n      var cards = this.cards.map(function (c) {\n        return c.toString();\n      });\n      return cards;\n    }\n    /**\n     * Determine if qualifying hand.\n     * @return {Boolean}\n     */\n\n\n    qualifiesHigh() {\n      if (!this.game.lowestQualified || this.alwaysQualifies) {\n        return true;\n      }\n\n      return this.compare(Hand.solve(this.game.lowestQualified, this.game)) <= 0;\n    }\n    /**\n     * Find highest ranked hands and remove any that don't qualify or lose to another hand.\n     * @param  {Array} hands Hands to evaluate.\n     * @return {Array}       Winning hands.\n     */\n\n\n    static winners(hands) {\n      hands = hands.filter(function (h) {\n        return h.qualifiesHigh();\n      });\n      var highestRank = Math.max.apply(Math, hands.map(function (h) {\n        return h.rank;\n      }));\n      hands = hands.filter(function (h) {\n        return h.rank === highestRank;\n      });\n      hands = hands.filter(function (h) {\n        var lose = false;\n\n        for (var i = 0; i < hands.length; i++) {\n          lose = h.loseTo(hands[i]);\n\n          if (lose) {\n            break;\n          }\n        }\n\n        return !lose;\n      });\n      return hands;\n    }\n    /**\n     * Build and return the best hand.\n     * @param  {Array} cards Array of cards (['Ad', '3c', 'Th', ...]).\n     * @param  {String} game Game being played.\n     * @param  {Boolean} canDisqualify Check for a qualified hand.\n     * @return {Hand}       Best hand.\n     */\n\n\n    static solve(cards, game, canDisqualify) {\n      game = game || 'standard';\n      game = typeof game === 'string' ? new Game(game) : game;\n      cards = cards || [''];\n      var hands = game.handValues;\n      var result = null;\n\n      for (var i = 0; i < hands.length; i++) {\n        result = new hands[i](cards, game, canDisqualify);\n\n        if (result.isPossible) {\n          break;\n        }\n      }\n\n      return result;\n    }\n    /**\n     * Separate cards based on if they are wild cards.\n     * @param  {Array} cards Array of cards (['Ad', '3c', 'Th', ...]).\n     * @param  {Game} game Game being played.\n     * @return {Array} [wilds, nonWilds] Wild and non-Wild Cards.\n     */\n\n\n    static stripWilds(cards, game) {\n      var card, wilds, nonWilds;\n      cards = cards || [''];\n      wilds = [];\n      nonWilds = [];\n\n      for (var i = 0; i < cards.length; i++) {\n        card = cards[i];\n\n        if (card.rank === -1) {\n          wilds.push(cards[i]);\n        } else {\n          nonWilds.push(cards[i]);\n        }\n      }\n\n      return [wilds, nonWilds];\n    }\n\n  }\n\n  class StraightFlush extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Straight Flush', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n      var possibleStraight = null;\n      var nonCards = [];\n\n      for (var suit in this.suits) {\n        cards = this.getCardsForFlush(suit, false);\n\n        if (cards && cards.length >= this.game.sfQualify) {\n          possibleStraight = cards;\n          break;\n        }\n      }\n\n      if (possibleStraight) {\n        if (this.game.descr !== 'standard') {\n          for (var suit in this.suits) {\n            if (possibleStraight[0].suit !== suit) {\n              nonCards = nonCards.concat(this.suits[suit] || []);\n              nonCards = Hand.stripWilds(nonCards, this.game)[1];\n            }\n          }\n        }\n\n        var straight = new Straight(possibleStraight, this.game);\n\n        if (straight.isPossible) {\n          this.cards = straight.cards;\n          this.cards = this.cards.concat(nonCards);\n          this.sfLength = straight.sfLength;\n        }\n      }\n\n      if (this.cards[0] && this.cards[0].rank === 13) {\n        this.descr = 'Royal Flush';\n      } else if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + suit + ' High';\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n\n  }\n\n  class RoyalFlush extends StraightFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n      var result = super.solve();\n      return result && this.descr === 'Royal Flush';\n    }\n\n  }\n\n  class NaturalRoyalFlush extends RoyalFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      var i = 0;\n      this.resetWildCards();\n      var result = super.solve();\n\n      if (result && this.cards) {\n        for (i = 0; i < this.game.sfQualify && i < this.cards.length; i++) {\n          if (this.cards[i].value === this.game.wildValue) {\n            result = false;\n            this.descr = 'Wild Royal Flush';\n            break;\n          }\n        }\n\n        if (i === this.game.sfQualify) {\n          this.descr = 'Royal Flush';\n        }\n      }\n\n      return result;\n    }\n\n  }\n\n  class WildRoyalFlush extends RoyalFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      var i = 0;\n      this.resetWildCards();\n      var result = super.solve();\n\n      if (result && this.cards) {\n        for (i = 0; i < this.game.sfQualify && i < this.cards.length; i++) {\n          if (this.cards[i].value === this.game.wildValue) {\n            this.descr = 'Wild Royal Flush';\n            break;\n          }\n        }\n\n        if (i === this.game.sfQualify) {\n          result = false;\n          this.descr = 'Royal Flush';\n        }\n      }\n\n      return result;\n    }\n\n  }\n\n  class FiveOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Five of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i = 0; i < this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 5) {\n          this.cards = this.values[i] || [];\n\n          for (var j = 0; j < this.wilds.length && this.cards.length < 5; j++) {\n            var wild = this.wilds[j];\n\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 5));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 5) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 5;\n    }\n\n  }\n\n  class FourOfAKindPairPlus extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four of a Kind with Pair or Better', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i = 0; i < this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 4) {\n          this.cards = this.values[i] || [];\n\n          for (var j = 0; j < this.wilds.length && this.cards.length < 4; j++) {\n            var wild = this.wilds[j];\n\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          break;\n        }\n      }\n\n      if (this.cards.length === 4) {\n        for (i = 0; i < this.values.length; i++) {\n          cards = this.values[i];\n\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n\n          if (this.getNumCardsByRank(i) >= 2) {\n            this.cards = this.cards.concat(cards || []);\n\n            for (var j = 0; j < this.wilds.length; j++) {\n              var wild = this.wilds[j];\n\n              if (wild.rank !== -1) {\n                continue;\n              }\n\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 6));\n            break;\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[4].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n\n  }\n\n  class FourOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i = 0; i < this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 4) {\n          this.cards = this.values[i] || [];\n\n          for (var j = 0; j < this.wilds.length && this.cards.length < 4; j++) {\n            var wild = this.wilds[j];\n\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 4));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 4;\n    }\n\n  }\n\n  class FourWilds extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four Wild Cards', game, canDisqualify);\n    }\n\n    solve() {\n      if (this.wilds.length === 4) {\n        this.cards = this.wilds;\n        this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 4));\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        this.descr = this.name;\n      }\n\n      return this.cards.length >= 4;\n    }\n\n  }\n\n  class ThreeOfAKindTwoPair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three of a Kind with Two Pair', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i = 0; i < this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n\n          for (var j = 0; j < this.wilds.length && this.cards.length < 3; j++) {\n            var wild = this.wilds[j];\n\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          break;\n        }\n      }\n\n      if (this.cards.length === 3) {\n        for (var i = 0; i < this.values.length; i++) {\n          var cards = this.values[i];\n\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n\n          if (this.cards.length > 5 && this.getNumCardsByRank(i) === 2) {\n            this.cards = this.cards.concat(cards || []);\n\n            for (var j = 0; j < this.wilds.length; j++) {\n              var wild = this.wilds[j];\n\n              if (wild.rank !== -1) {\n                continue;\n              }\n\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 4));\n            break;\n          } else if (this.getNumCardsByRank(i) === 2) {\n            this.cards = this.cards.concat(cards);\n\n            for (var j = 0; j < this.wilds.length; j++) {\n              var wild = this.wilds[j];\n\n              if (wild.rank !== -1) {\n                continue;\n              }\n\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n          }\n        }\n      }\n\n      if (this.cards.length >= 7) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[3].toString().slice(0, -1) + '\\'s & ' + this.cards[5].value + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 7;\n    }\n\n  }\n\n  class FullHouse extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Full House', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i = 0; i < this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n\n          for (var j = 0; j < this.wilds.length && this.cards.length < 3; j++) {\n            var wild = this.wilds[j];\n\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          break;\n        }\n      }\n\n      if (this.cards.length === 3) {\n        for (i = 0; i < this.values.length; i++) {\n          cards = this.values[i];\n\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n\n          if (this.getNumCardsByRank(i) >= 2) {\n            this.cards = this.cards.concat(cards || []);\n\n            for (var j = 0; j < this.wilds.length; j++) {\n              var wild = this.wilds[j];\n\n              if (wild.rank !== -1) {\n                continue;\n              }\n\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 5));\n            break;\n          }\n        }\n      }\n\n      if (this.cards.length >= 5) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[3].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 5;\n    }\n\n  }\n\n  class Flush extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Flush', game, canDisqualify);\n    }\n\n    solve() {\n      this.sfLength = 0;\n      this.resetWildCards();\n\n      for (var suit in this.suits) {\n        var cards = this.getCardsForFlush(suit, true);\n\n        if (cards.length >= this.game.sfQualify) {\n          this.cards = cards;\n          break;\n        }\n      }\n\n      if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + suit + ' High';\n        this.sfLength = this.cards.length;\n\n        if (this.cards.length < this.game.cardsInHand) {\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - this.cards.length));\n        }\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n\n  }\n\n  class Straight extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Straight', game, canDisqualify);\n    }\n\n    solve() {\n      var card, checkCards;\n      this.resetWildCards(); // There are still some games that count the wheel as second highest.\n      // These games do not have enough cards/wilds to make AKQJT and 5432A both possible.\n\n      if (this.game.wheelStatus === 1) {\n        this.cards = this.getWheel();\n\n        if (this.cards.length) {\n          var wildCount = 0;\n\n          for (var i = 0; i < this.cards.length; i++) {\n            card = this.cards[i];\n\n            if (card.value === this.game.wildValue) {\n              wildCount += 1;\n            }\n\n            if (card.rank === 0) {\n              card.rank = values.indexOf('A');\n              card.wildValue = 'A';\n\n              if (card.value === '1') {\n                card.value = 'A';\n              }\n            }\n          }\n\n          this.cards = this.cards.sort(Card.sort);\n\n          for (; wildCount < this.wilds.length && this.cards.length < this.game.cardsInHand; wildCount++) {\n            card = this.wilds[wildCount];\n            card.rank = values.indexOf('A');\n            card.wildValue = 'A';\n            this.cards.push(card);\n          }\n\n          this.descr = this.name + ', Wheel';\n          this.sfLength = this.sfQualify;\n\n          if (this.cards[0].value === 'A') {\n            this.cards = this.cards.concat(this.nextHighest().slice(1, this.game.cardsInHand - this.cards.length + 1));\n          } else {\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - this.cards.length));\n          }\n\n          return true;\n        }\n\n        this.resetWildCards();\n      }\n\n      this.cards = this.getGaps(); // Now add the wild cards, if any, and set the appropriate ranks\n\n      for (var i = 0; i < this.wilds.length; i++) {\n        card = this.wilds[i];\n        checkCards = this.getGaps(this.cards.length);\n\n        if (this.cards.length === checkCards.length) {\n          // This is an \"open-ended\" straight, the high rank is the highest possible rank.\n          if (this.cards[0].rank < values.length - 1) {\n            card.rank = this.cards[0].rank + 1;\n            card.wildValue = values[card.rank];\n            this.cards.push(card);\n          } else {\n            card.rank = this.cards[this.cards.length - 1].rank - 1;\n            card.wildValue = values[card.rank];\n            this.cards.push(card);\n          }\n        } else {\n          // This is an \"inside\" straight, the high card doesn't change.\n          for (var j = 1; j < this.cards.length; j++) {\n            if (this.cards[j - 1].rank - this.cards[j].rank > 1) {\n              card.rank = this.cards[j - 1].rank - 1;\n              card.wildValue = values[card.rank];\n              this.cards.push(card);\n              break;\n            }\n          }\n        }\n\n        this.cards = this.cards.sort(Card.sort);\n      }\n\n      if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + ' High';\n        this.cards = this.cards.slice(0, this.game.cardsInHand);\n        this.sfLength = this.cards.length;\n\n        if (this.cards.length < this.game.cardsInHand) {\n          if (this.cards[this.sfLength - 1].rank === 0) {\n            this.cards = this.cards.concat(this.nextHighest().slice(1, this.game.cardsInHand - this.cards.length + 1));\n          } else {\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - this.cards.length));\n          }\n        }\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n    /**\n     * Get the number of gaps in the straight.\n     * @return {Array} Highest potential straight with fewest number of gaps.\n     */\n\n\n    getGaps(checkHandLength) {\n      var wildCards, cardsToCheck, i, card, gapCards, cardsList, gapCount, prevCard, diff;\n      var stripReturn = Hand.stripWilds(this.cardPool, this.game);\n      wildCards = stripReturn[0];\n      cardsToCheck = stripReturn[1];\n\n      for (i = 0; i < cardsToCheck.length; i++) {\n        card = cardsToCheck[i];\n\n        if (card.wildValue === 'A') {\n          cardsToCheck.push(new Card('1' + card.suit));\n        }\n      }\n\n      cardsToCheck = cardsToCheck.sort(Card.sort);\n\n      if (checkHandLength) {\n        i = cardsToCheck[0].rank + 1;\n      } else {\n        checkHandLength = this.game.sfQualify;\n        i = values.length;\n      }\n\n      gapCards = [];\n\n      for (; i > 0; i--) {\n        cardsList = [];\n        gapCount = 0;\n\n        for (var j = 0; j < cardsToCheck.length; j++) {\n          card = cardsToCheck[j];\n\n          if (card.rank > i) {\n            continue;\n          }\n\n          prevCard = cardsList[cardsList.length - 1];\n          diff = prevCard ? prevCard.rank - card.rank : i - card.rank;\n\n          if (diff === null) {\n            cardsList.push(card);\n          } else if (checkHandLength < gapCount + diff + cardsList.length) {\n            break;\n          } else if (diff > 0) {\n            cardsList.push(card);\n            gapCount += diff - 1;\n          }\n        }\n\n        if (cardsList.length > gapCards.length) {\n          gapCards = cardsList.slice();\n        }\n\n        if (this.game.sfQualify - gapCards.length <= wildCards.length) {\n          break;\n        }\n      }\n\n      return gapCards;\n    }\n\n    getWheel() {\n      var wildCards, cardsToCheck, i, card, wheelCards, wildCount, cardFound;\n      var stripReturn = Hand.stripWilds(this.cardPool, this.game);\n      wildCards = stripReturn[0];\n      cardsToCheck = stripReturn[1];\n\n      for (i = 0; i < cardsToCheck.length; i++) {\n        card = cardsToCheck[i];\n\n        if (card.wildValue === 'A') {\n          cardsToCheck.push(new Card('1' + card.suit));\n        }\n      }\n\n      cardsToCheck = cardsToCheck.sort(Card.sort);\n      wheelCards = [];\n      wildCount = 0;\n\n      for (i = this.game.sfQualify - 1; i >= 0; i--) {\n        cardFound = false;\n\n        for (var j = 0; j < cardsToCheck.length; j++) {\n          card = cardsToCheck[j];\n\n          if (card.rank > i) {\n            continue;\n          }\n\n          if (card.rank < i) {\n            break;\n          }\n\n          wheelCards.push(card);\n          cardFound = true;\n          break;\n        }\n\n        if (!cardFound) {\n          if (wildCount < wildCards.length) {\n            wildCards[wildCount].rank = i;\n            wildCards[wildCount].wildValue = values[i];\n            wheelCards.push(wildCards[wildCount]);\n            wildCount += 1;\n          } else {\n            return [];\n          }\n        }\n      }\n\n      return wheelCards;\n    }\n\n  }\n\n  class TwoThreeOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Two Three Of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i = 0; i < this.values.length; i++) {\n        var cards = this.values[i];\n\n        if (this.cards.length > 0 && this.getNumCardsByRank(i) === 3) {\n          this.cards = this.cards.concat(cards || []);\n\n          for (var j = 0; j < this.wilds.length; j++) {\n            var wild = this.wilds[j];\n\n            if (wild.rank !== -1) {\n              continue;\n            }\n\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 6));\n          break;\n        } else if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.cards.concat(cards);\n\n          for (var j = 0; j < this.wilds.length; j++) {\n            var wild = this.wilds[j];\n\n            if (wild.rank !== -1) {\n              continue;\n            }\n\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[3].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n\n  }\n\n  class ThreeOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i = 0; i < this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n\n          for (var j = 0; j < this.wilds.length && this.cards.length < 3; j++) {\n            var wild = this.wilds[j];\n\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 3));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 3) {\n        if (this.game.noKickers) {\n          this.cards.length = 3;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 3;\n    }\n\n  }\n\n  class ThreePair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i = 0; i < this.values.length; i++) {\n        var cards = this.values[i];\n\n        if (this.cards.length > 2 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n\n          for (var j = 0; j < this.wilds.length; j++) {\n            var wild = this.wilds[j];\n\n            if (wild.rank !== -1) {\n              continue;\n            }\n\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 6));\n          break;\n        } else if (this.cards.length > 0 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n\n          for (var j = 0; j < this.wilds.length; j++) {\n            var wild = this.wilds[j];\n\n            if (wild.rank !== -1) {\n              continue;\n            }\n\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        } else if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards);\n\n          for (var j = 0; j < this.wilds.length; j++) {\n            var wild = this.wilds[j];\n\n            if (wild.rank !== -1) {\n              continue;\n            }\n\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[2].toString().slice(0, -1) + '\\'s & ' + this.cards[4].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n\n  }\n\n  class TwoPair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Two Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i = 0; i < this.values.length; i++) {\n        var cards = this.values[i];\n\n        if (this.cards.length > 0 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n\n          for (var j = 0; j < this.wilds.length; j++) {\n            var wild = this.wilds[j];\n\n            if (wild.rank !== -1) {\n              continue;\n            }\n\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 4));\n          break;\n        } else if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards);\n\n          for (var j = 0; j < this.wilds.length; j++) {\n            var wild = this.wilds[j];\n\n            if (wild.rank !== -1) {\n              continue;\n            }\n\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[2].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 4;\n    }\n\n  }\n\n  class OnePair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i = 0; i < this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(this.values[i] || []);\n\n          for (var j = 0; j < this.wilds.length && this.cards.length < 2; j++) {\n            var wild = this.wilds[j];\n\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand - 2));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 2) {\n        if (this.game.noKickers) {\n          this.cards.length = 2;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 2;\n    }\n\n  }\n\n  class HighCard extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'High Card', game, canDisqualify);\n    }\n\n    solve() {\n      this.cards = this.cardPool.slice(0, this.game.cardsInHand);\n\n      for (var i = 0; i < this.cards.length; i++) {\n        var card = this.cards[i];\n\n        if (this.cards[i].value === this.game.wildValue) {\n          this.cards[i].wildValue = 'A';\n          this.cards[i].rank = values.indexOf('A');\n        }\n      }\n\n      if (this.game.noKickers) {\n        this.cards.length = 1;\n      }\n\n      this.cards = this.cards.sort(Card.sort);\n      this.descr = this.cards[0].toString().slice(0, -1) + ' High';\n      return true;\n    }\n\n  }\n  /*\n   * Base class for handling Pai Gow Poker hands.\n   * House Way is in accordance with the MGM Grand Casino, Las Vegas NV.\n   * http://wizardofodds.com/games/pai-gow-poker/house-way/mgm/\n   * EXCEPTION: With Four of a Kind and S/F, preserve the S/F, just like Three of a Kind.\n   */\n\n\n  class PaiGowPokerHelper {\n    /*\n     * Constructor class.\n     * @param {Hand} hand Solved hand against Game 'paigowpokerfull'.\n     */\n    constructor(hand) {\n      this.baseHand = null;\n      this.hiHand = null;\n      this.loHand = null;\n      this.game = null;\n      this.loGame = new Game('paigowpokerlo');\n      this.hiGame = new Game('paigowpokerhi');\n\n      if (Array.isArray(hand)) {\n        this.baseHand = Hand.solve(hand, new Game('paigowpokerfull'));\n      } else {\n        this.baseHand = hand;\n      }\n\n      this.game = this.baseHand.game;\n    }\n    /*\n     * Set a full hand into high and low hands, according to House Way.\n     */\n\n\n    splitHouseWay() {\n      var hiCards, loCards;\n      var rank = this.game.handValues.length - this.baseHand.rank;\n      var handValue = this.game.handValues[rank];\n\n      if (handValue === FiveOfAKind) {\n        if (this.baseHand.cards[5].value === 'K' && this.baseHand.cards[6].value === 'K') {\n          loCards = this.baseHand.cards.slice(5, 7);\n          hiCards = this.baseHand.cards.slice(0, 5);\n        } else {\n          loCards = this.baseHand.cards.slice(0, 2);\n          hiCards = this.baseHand.cards.slice(2, 7);\n        }\n      } else if (handValue === FourOfAKindPairPlus) {\n        if (this.baseHand.cards[0].wildValue === 'A' && this.baseHand.cards[4].value !== 'K') {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        }\n      } else if (handValue === StraightFlush || handValue === Flush || handValue === Straight) {\n        var sfReturn;\n        var altGame = new Game('paigowpokeralt');\n        var altHand = Hand.solve(this.baseHand.cards, altGame);\n        var altRank = altGame.handValues.length - altHand.rank;\n\n        if (altGame.handValues[altRank] === FourOfAKind) {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        } else if (altGame.handValues[altRank] === FullHouse) {\n          hiCards = altHand.cards.slice(0, 3);\n          loCards = altHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(altHand.cards.slice(5, 7));\n        } else if (altGame.handValues[altRank] === ThreeOfAKind) {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        } else if (altGame.handValues[altRank] === ThreePair) {\n          loCards = altHand.cards.slice(0, 2);\n          hiCards = altHand.cards.slice(2, 7);\n        } else if (altGame.handValues[altRank] === TwoPair) {\n          if (altHand.cards[0].rank < 6) {\n            if (altHand.cards[4].wildValue === 'A') {\n              hiCards = altHand.cards.slice(0, 4);\n              loCards = altHand.cards.slice(4, 6);\n              hiCards.push(altHand.cards[6]);\n            } else {\n              sfReturn = this.getSFData(altHand.cards);\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n            }\n          } else if (altHand.cards[0].rank < 10) {\n            if (altHand.cards[4].wildValue === 'A') {\n              hiCards = altHand.cards.slice(0, 4);\n              loCards = altHand.cards.slice(4, 6);\n              hiCards.push(altHand.cards[6]);\n            } else {\n              hiCards = altHand.cards.slice(0, 2);\n              loCards = altHand.cards.slice(2, 4);\n              hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n            }\n          } else if (altHand.cards[0].wildValue !== 'A' && altHand.cards[2].rank < 6 && altHand.cards[4].wildValue === 'A') {\n            hiCards = altHand.cards.slice(0, 4);\n            loCards = altHand.cards.slice(4, 6);\n            hiCards.push(altHand.cards[6]);\n          } else {\n            hiCards = altHand.cards.slice(0, 2);\n            loCards = altHand.cards.slice(2, 4);\n            hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n          }\n        } else if (altGame.handValues[altRank] === OnePair) {\n          if (altHand.cards[0].rank >= values.indexOf('T') && altHand.cards[0].rank <= values.indexOf('K') && altHand.cards[2].wildValue === 'A') {\n            var possibleSF = altHand.cards.slice(0, 2);\n            possibleSF = possibleSF.concat(altHand.cards.slice(3, 7));\n            sfReturn = this.getSFData(possibleSF);\n\n            if (sfReturn[0]) {\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n              loCards.push(altHand.cards[2]);\n            } else {\n              hiCards = altHand.cards.slice(0, 2);\n              loCards = altHand.cards.slice(2, 4);\n              hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n            }\n          } else {\n            sfReturn = this.getSFData(altHand.cards.slice(2, 7));\n\n            if (sfReturn[0]) {\n              hiCards = sfReturn[0];\n              loCards = altHand.cards.slice(0, 2);\n            } else {\n              sfReturn = this.getSFData(altHand.cards);\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n            }\n          }\n        } else {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        }\n      } else if (handValue === FourOfAKind) {\n        if (this.baseHand.cards[0].rank < 6) {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else if (this.baseHand.cards[0].rank < 10 && this.baseHand.cards[4].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        }\n      } else if (handValue === TwoThreeOfAKind) {\n        loCards = this.baseHand.cards.slice(0, 2);\n        hiCards = this.baseHand.cards.slice(3, 6);\n        hiCards.push(this.baseHand.cards[2]);\n        hiCards.push(this.baseHand.cards[6]);\n      } else if (handValue === ThreeOfAKindTwoPair) {\n        hiCards = this.baseHand.cards.slice(0, 3);\n        loCards = this.baseHand.cards.slice(3, 5);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n      } else if (handValue === FullHouse) {\n        if (this.baseHand.cards[3].wildValue === '2' && this.baseHand.cards[5].wildValue === 'A' && this.baseHand.cards[6].wildValue === 'K') {\n          hiCards = this.baseHand.cards.slice(0, 5);\n          loCards = this.baseHand.cards.slice(5, 7);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 3);\n          loCards = this.baseHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n        }\n      } else if (handValue === ThreeOfAKind) {\n        if (this.baseHand.cards[0].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 3);\n          loCards = this.baseHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n        }\n      } else if (handValue === ThreePair) {\n        loCards = this.baseHand.cards.slice(0, 2);\n        hiCards = this.baseHand.cards.slice(2, 7);\n      } else if (handValue === TwoPair) {\n        if (this.baseHand.cards[0].rank < 6) {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else if (this.baseHand.cards[0].rank < 10) {\n          if (this.baseHand.cards[4].wildValue === 'A') {\n            hiCards = this.baseHand.cards.slice(0, 4);\n            loCards = this.baseHand.cards.slice(4, 6);\n            hiCards.push(this.baseHand.cards[6]);\n          } else {\n            hiCards = this.baseHand.cards.slice(0, 2);\n            loCards = this.baseHand.cards.slice(2, 4);\n            hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n          }\n        } else if (this.baseHand.cards[0].wildValue !== 'A' && this.baseHand.cards[2].rank < 6 && this.baseHand.cards[4].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        }\n      } else if (handValue === OnePair) {\n        hiCards = this.baseHand.cards.slice(0, 2);\n        loCards = this.baseHand.cards.slice(2, 4);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n      } else {\n        hiCards = [this.baseHand.cards[0]];\n        loCards = this.baseHand.cards.slice(1, 3);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(3, 7));\n      }\n\n      this.hiHand = Hand.solve(hiCards, this.hiGame);\n      this.loHand = Hand.solve(loCards, this.loGame);\n    }\n    /*\n     * Determine the best possible Straight and/or Flush.\n     * @param  {Array} cards 5-7 Card objects to check.\n     * @return {Array} [hiCards, loCards] High and Low components, if any.\n     */\n\n\n    getSFData(cards) {\n      var hiCards, possibleLoCards, bestLoCards, bestHand;\n      var handsToCheck = [new StraightFlush(cards, new Game('paigowpokersf7')), new StraightFlush(cards, new Game('paigowpokersf6')), new StraightFlush(cards, this.game), new Flush(cards, new Game('paigowpokersf7')), new Flush(cards, new Game('paigowpokersf6')), new Flush(cards, this.game), new Straight(cards, new Game('paigowpokersf7')), new Straight(cards, new Game('paigowpokersf6')), new Straight(cards, this.game)];\n\n      for (var i = 0; i < handsToCheck.length; i++) {\n        var hand = handsToCheck[i];\n\n        if (hand.isPossible) {\n          if (hand.sfLength === 7) {\n            possibleLoCards = [hand.cards[0], hand.cards[1]];\n          } else if (hand.sfLength === 6) {\n            possibleLoCards = [hand.cards[0]];\n\n            if (cards.length > 6) {\n              possibleLoCards.push(hand.cards[6]);\n            }\n          } else if (cards.length > 5) {\n            possibleLoCards = [hand.cards[5]];\n\n            if (cards.length > 6) {\n              possibleLoCards.push(hand.cards[6]);\n            }\n          }\n\n          if (possibleLoCards) {\n            possibleLoCards = possibleLoCards.sort(Card.sort);\n\n            if (!bestLoCards || bestLoCards[0].rank < possibleLoCards[0].rank || bestLoCards.length > 1 && bestLoCards[0].rank === possibleLoCards[0].rank && bestLoCards[1].rank < possibleLoCards[1].rank) {\n              bestLoCards = possibleLoCards;\n              bestHand = hand;\n            }\n          } else if (!bestHand) {\n            bestHand = hand;\n            break;\n          }\n        }\n      }\n\n      if (bestHand) {\n        if (bestHand.sfLength === 7) {\n          hiCards = bestHand.cards.slice(2, 7);\n        } else if (bestHand.sfLength === 6) {\n          hiCards = bestHand.cards.slice(1, 6);\n        } else {\n          hiCards = bestHand.cards.slice(0, 5);\n        }\n      }\n\n      return [hiCards, bestLoCards];\n    }\n    /*\n     * Determine if the setting of the hands is valid. Hi must be higher than lo.\n     * @return {Boolean}\n     */\n\n\n    qualifiesValid() {\n      var compareHands = Hand.winners([this.hiHand, this.loHand]);\n      return !(compareHands.length === 1 && compareHands[0] === this.loHand);\n    }\n    /**\n     * Find which of two split hands is best, according to rules.\n     * @param  {PaiGowPokerHelper} player Player hand to evaluate. Must be set.\n     * @param  {PaiGowPokerHelper} banker Banker hand to evaluate. Must be set.\n     * @param  {int}               winner Winning party, if any.\n     *                                    Player = 1, Banker = -1, Push = 0\n     */\n\n\n    static winners(player, banker) {\n      if (!player.qualifiesValid()) {\n        if (banker.qualifiesValid()) {\n          return -1;\n        } // Probably shouldn't get here because the dealer must set house way.\n        // However, we'll still have it as a sanity check, just in case.\n\n\n        return 0;\n      }\n\n      if (!banker.qualifiesValid()) {\n        return 1;\n      }\n\n      var hiWinner = Hand.winners([player.hiHand, banker.hiHand]);\n      var loWinner = Hand.winners([player.loHand, banker.loHand]); // In Pai Gow Poker, Banker takes any equal valued hands.\n\n      if (hiWinner.length === 1 && hiWinner[0] === player.hiHand) {\n        if (loWinner.length === 1 && loWinner[0] === player.loHand) {\n          // Player wins both; player wins\n          return 1;\n        } // Player wins hi, Banker wins lo; push\n\n\n        return 0;\n      }\n\n      if (loWinner.length === 1 && loWinner[0] === player.loHand) {\n        // Banker wins hi, Player wins lo; push\n        return 0;\n      } // Banker wins both; banker wins\n\n\n      return -1;\n    }\n    /*\n     * Set a full hand into high and low hands, according to manual input.\n     * @param  {Array} hiHand       High hand to specify.\n     *                              Can also be {Hand} with game of 'paigowpokerhi'.\n     * @param  {Array} loHand       Low hand to specify.\n     *                              Can also be {Hand} with game of 'paigowpokerlo'.\n     * @return {PaiGowPokerHelper}  Object with split hands.\n     */\n\n\n    static setHands(hiHand, loHand) {\n      var fullHand = [];\n\n      if (Array.isArray(hiHand)) {\n        hiHand = Hand.solve(hiHand, new Game('paigowpokerhi'));\n      }\n\n      fullHand = fullHand.concat(hiHand.cardPool);\n\n      if (Array.isArray(loHand)) {\n        loHand = Hand.solve(loHand, new Game('paigowpokerlo'));\n      }\n\n      fullHand = fullHand.concat(loHand.cardPool);\n      var result = new PaiGowPokerHelper(fullHand);\n      result.hiHand = hiHand;\n      result.loHand = loHand;\n      return result;\n    }\n    /**\n     * Build and return PaiGowPokerHelper object with hands split House Way.\n     * @param  {Array} fullHand    Array of cards (['Ad', '3c', 'Th', ...]).\n     *                             Can also be {Hand} with game of 'paigowpokerfull'.\n     * @return {PaiGowPokerHelper} Object with split hands.\n     */\n\n\n    static solve(fullHand) {\n      var result = new PaiGowPokerHelper(fullHand = fullHand || ['']);\n      result.splitHouseWay();\n      return result;\n    }\n\n  }\n\n  var gameRules = {\n    'standard': {\n      'cardsInHand': 5,\n      'handValues': [StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': null,\n      \"noKickers\": false\n    },\n    'jacksbetter': {\n      'cardsInHand': 5,\n      'handValues': [StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['Jc', 'Jd', '4h', '3s', '2c'],\n      \"noKickers\": true\n    },\n    'joker': {\n      'cardsInHand': 5,\n      'handValues': [NaturalRoyalFlush, FiveOfAKind, WildRoyalFlush, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['4c', '3d', '3h', '2s', '2c'],\n      \"noKickers\": true\n    },\n    'deuceswild': {\n      'cardsInHand': 5,\n      'handValues': [NaturalRoyalFlush, FourWilds, WildRoyalFlush, FiveOfAKind, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, HighCard],\n      'wildValue': '2',\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['5c', '4d', '3h', '3s', '3c'],\n      \"noKickers\": true\n    },\n    'threecard': {\n      'cardsInHand': 3,\n      'handValues': [StraightFlush, ThreeOfAKind, Straight, Flush, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 3,\n      'lowestQualified': ['Qh', '3s', '2c'],\n      \"noKickers\": false\n    },\n    'fourcard': {\n      'cardsInHand': 4,\n      'handValues': [FourOfAKind, StraightFlush, ThreeOfAKind, Flush, Straight, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 4,\n      'lowestQualified': null,\n      \"noKickers\": true\n    },\n    'fourcardbonus': {\n      'cardsInHand': 4,\n      'handValues': [FourOfAKind, StraightFlush, ThreeOfAKind, Flush, Straight, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 4,\n      'lowestQualified': ['Ac', 'Ad', '3h', '2s'],\n      \"noKickers\": true\n    },\n    'paigowpokerfull': {\n      'cardsInHand': 7,\n      'handValues': [FiveOfAKind, FourOfAKindPairPlus, StraightFlush, Flush, Straight, FourOfAKind, TwoThreeOfAKind, ThreeOfAKindTwoPair, FullHouse, ThreeOfAKind, ThreePair, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokeralt': {\n      'cardsInHand': 7,\n      'handValues': [FourOfAKind, FullHouse, ThreeOfAKind, ThreePair, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokersf6': {\n      'cardsInHand': 7,\n      'handValues': [StraightFlush, Flush, Straight],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 6,\n      'lowestQualified': null\n    },\n    'paigowpokersf7': {\n      'cardsInHand': 7,\n      'handValues': [StraightFlush, Flush, Straight],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 7,\n      'lowestQualified': null\n    },\n    'paigowpokerhi': {\n      'cardsInHand': 5,\n      'handValues': [FiveOfAKind, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokerlo': {\n      'cardsInHand': 2,\n      'handValues': [OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    }\n  };\n  /**\n   * Base Game class that defines the rules of the game.\n   */\n\n  class Game {\n    constructor(descr) {\n      this.descr = descr;\n      this.cardsInHand = 0;\n      this.handValues = [];\n      this.wildValue = null;\n      this.wildStatus = 0;\n      this.wheelStatus = 0;\n      this.sfQualify = 5;\n      this.lowestQualified = null;\n      this.noKickers = null; // Set values based on the game rules.\n\n      if (!this.descr || !gameRules[this.descr]) {\n        this.descr = 'standard';\n      }\n\n      this.cardsInHand = gameRules[this.descr]['cardsInHand'];\n      this.handValues = gameRules[this.descr]['handValues'];\n      this.wildValue = gameRules[this.descr]['wildValue'];\n      this.wildStatus = gameRules[this.descr]['wildStatus'];\n      this.wheelStatus = gameRules[this.descr]['wheelStatus'];\n      this.sfQualify = gameRules[this.descr]['sfQualify'];\n      this.lowestQualified = gameRules[this.descr]['lowestQualified'];\n      this.noKickers = gameRules[this.descr]['noKickers'];\n    }\n\n  }\n\n  function exportToGlobal(global) {\n    global.Card = Card;\n    global.Hand = Hand;\n    global.Game = Game;\n    global.RoyalFlush = RoyalFlush;\n    global.NaturalRoyalFlush = NaturalRoyalFlush;\n    global.WildRoyalFlush = WildRoyalFlush;\n    global.FiveOfAKind = FiveOfAKind;\n    global.StraightFlush = StraightFlush;\n    global.FourOfAKindPairPlus = FourOfAKindPairPlus;\n    global.FourOfAKind = FourOfAKind;\n    global.FourWilds = FourWilds;\n    global.TwoThreeOfAKind = TwoThreeOfAKind;\n    global.ThreeOfAKindTwoPair = ThreeOfAKindTwoPair;\n    global.FullHouse = FullHouse;\n    global.Flush = Flush;\n    global.Straight = Straight;\n    global.ThreeOfAKind = ThreeOfAKind;\n    global.ThreePair = ThreePair;\n    global.TwoPair = TwoPair;\n    global.OnePair = OnePair;\n    global.HighCard = HighCard;\n    global.PaiGowPokerHelper = PaiGowPokerHelper;\n  } // Export the classes for node.js use.\n\n\n  if (typeof exports !== 'undefined') {\n    exportToGlobal(exports);\n  } // Add the classes to the window for browser use.\n\n\n  if (typeof window !== 'undefined') {\n    exportToGlobal(window);\n  }\n})();","map":{"version":3,"sources":["/Users/kyletse/Desktop/Projects/chinese-poker/node_modules/pokersolver/pokersolver.js"],"names":["values","Card","constructor","str","value","substr","suit","toLowerCase","rank","indexOf","wildValue","toString","replace","sort","a","b","Hand","cards","name","game","canDisqualify","cardPool","suits","wilds","sfLength","alwaysQualifies","lowestQualified","handRank","handValues","length","i","map","c","card","obj","obj1","key","key1","push","reverse","isPossible","solve","compare","result","loseTo","hand","getNumCardsByRank","val","checkCardsLength","wildStatus","getCardsForFlush","setRanks","wild","j","resetWildCards","nextHighest","picks","excluding","concat","filter","join","toArray","qualifiesHigh","winners","hands","h","highestRank","Math","max","apply","lose","Game","stripWilds","nonWilds","StraightFlush","possibleStraight","nonCards","sfQualify","descr","straight","Straight","slice","RoyalFlush","NaturalRoyalFlush","WildRoyalFlush","FiveOfAKind","cardsInHand","FourOfAKindPairPlus","type","FourOfAKind","noKickers","FourWilds","ThreeOfAKindTwoPair","FullHouse","Flush","checkCards","wheelStatus","getWheel","wildCount","getGaps","checkHandLength","wildCards","cardsToCheck","gapCards","cardsList","gapCount","prevCard","diff","stripReturn","wheelCards","cardFound","TwoThreeOfAKind","ThreeOfAKind","ThreePair","TwoPair","OnePair","HighCard","PaiGowPokerHelper","baseHand","hiHand","loHand","loGame","hiGame","Array","isArray","splitHouseWay","hiCards","loCards","handValue","sfReturn","altGame","altHand","altRank","getSFData","possibleSF","possibleLoCards","bestLoCards","bestHand","handsToCheck","qualifiesValid","compareHands","player","banker","hiWinner","loWinner","setHands","fullHand","gameRules","exportToGlobal","global","exports","window"],"mappings":"AAAA;;;;;AAMA,CAAC,YAAW;AACV,eADU,CAGV;;AACA,MAAIA,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,EAAkE,GAAlE,CAAb;AAEA;;;;AAGA,QAAMC,IAAN,CAAW;AACTC,IAAAA,WAAW,CAACC,GAAD,EAAM;AACf,WAAKC,KAAL,GAAaD,GAAG,CAACE,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAb;AACA,WAAKC,IAAL,GAAYH,GAAG,CAACE,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiBE,WAAjB,EAAZ;AACA,WAAKC,IAAL,GAAYR,MAAM,CAACS,OAAP,CAAe,KAAKL,KAApB,CAAZ;AACA,WAAKM,SAAL,GAAiBP,GAAG,CAACE,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAjB;AACD,KANQ,CAQT;;;AACAM,IAAAA,QAAQ,GAAG;AACT,aAAO,KAAKD,SAAL,CAAeE,OAAf,CAAuB,GAAvB,EAA4B,IAA5B,IAAoC,KAAKN,IAAhD;AACD;;AAED,WAAOO,IAAP,CAAYC,CAAZ,EAAeC,CAAf,EAAkB;AAChB,UAAID,CAAC,CAACN,IAAF,GAASO,CAAC,CAACP,IAAf,EAAqB;AACnB,eAAO,CAAC,CAAR;AACD,OAFD,MAEO,IAAIM,CAAC,CAACN,IAAF,GAASO,CAAC,CAACP,IAAf,EAAqB;AAC1B,eAAO,CAAP;AACD,OAFM,MAEA;AACL,eAAO,CAAP;AACD;AACF;;AArBQ;AAwBX;;;;;AAGA,QAAMQ,IAAN,CAAW;AACTd,IAAAA,WAAW,CAACe,KAAD,EAAQC,IAAR,EAAcC,IAAd,EAAoBC,aAApB,EAAmC;AAC5C,WAAKC,QAAL,GAAgB,EAAhB;AACA,WAAKJ,KAAL,GAAa,EAAb;AACA,WAAKK,KAAL,GAAa,EAAb;AACA,WAAKtB,MAAL,GAAc,EAAd;AACA,WAAKuB,KAAL,GAAa,EAAb;AACA,WAAKL,IAAL,GAAYA,IAAZ;AACA,WAAKC,IAAL,GAAYA,IAAZ;AACA,WAAKK,QAAL,GAAgB,CAAhB;AACA,WAAKC,eAAL,GAAuB,IAAvB,CAT4C,CAW5C;AACA;;AACA,UAAIL,aAAa,IAAI,KAAKD,IAAL,CAAUO,eAA/B,EAAgD;AAC9C,aAAKD,eAAL,GAAuB,KAAvB;AACD,OAf2C,CAiB5C;;;AACA,UAAIE,QAAQ,GAAG,KAAKR,IAAL,CAAUS,UAAV,CAAqBC,MAApC;;AACA,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAKX,IAAL,CAAUS,UAAV,CAAqBC,MAArC,EAA6CC,CAAC,EAA9C,EAAkD;AAChD,YAAI,KAAKX,IAAL,CAAUS,UAAV,CAAqBE,CAArB,MAA4B,KAAK5B,WAArC,EAAkD;AAChD;AACD;AACF;;AACD,WAAKM,IAAL,GAAYmB,QAAQ,GAAGG,CAAvB,CAxB4C,CA0B5C;;AACA,WAAKT,QAAL,GAAgBJ,KAAK,CAACc,GAAN,CAAU,UAASC,CAAT,EAAY;AACpC,eAAQ,OAAOA,CAAP,KAAa,QAAd,GAA0B,IAAI/B,IAAJ,CAAS+B,CAAT,CAA1B,GAAwCA,CAA/C;AACD,OAFe,CAAhB,CA3B4C,CA+B5C;;AACA,WAAK,IAAIF,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAKT,QAAL,CAAcQ,MAA9B,EAAsCC,CAAC,EAAvC,EAA2C;AACzCG,QAAAA,IAAI,GAAG,KAAKZ,QAAL,CAAcS,CAAd,CAAP;;AACA,YAAIG,IAAI,CAAC7B,KAAL,KAAe,KAAKe,IAAL,CAAUT,SAA7B,EAAwC;AACtCuB,UAAAA,IAAI,CAACzB,IAAL,GAAY,CAAC,CAAb;AACD;AACF;;AACD,WAAKa,QAAL,GAAgB,KAAKA,QAAL,CAAcR,IAAd,CAAmBZ,IAAI,CAACY,IAAxB,CAAhB,CAtC4C,CAwC5C;;AACA,UAAIqB,GAAJ,EAASC,IAAT,EAAeC,GAAf,EAAoBC,IAApB,EAA0BJ,IAA1B;;AACA,WAAK,IAAIH,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAKT,QAAL,CAAcQ,MAA9B,EAAsCC,CAAC,EAAvC,EAA2C;AACzC;AACAG,QAAAA,IAAI,GAAG,KAAKZ,QAAL,CAAcS,CAAd,CAAP,CAFyC,CAIzC;;AACA,YAAIG,IAAI,CAACzB,IAAL,KAAc,CAAC,CAAnB,EAAsB;AACpB,eAAKe,KAAL,CAAWe,IAAX,CAAgBL,IAAhB;AACD,SAFD,MAEO;AACL,WAACC,GAAG,GAAG,KAAKZ,KAAZ,EAAmBc,GAAG,GAAGH,IAAI,CAAC3B,IAA9B,MAAwC4B,GAAG,CAACE,GAAD,CAAH,GAAW,EAAnD;AACA,WAACD,IAAI,GAAG,KAAKnC,MAAb,EAAqBqC,IAAI,GAAGJ,IAAI,CAACzB,IAAjC,MAA2C2B,IAAI,CAACE,IAAD,CAAJ,GAAa,EAAxD,EAFK,CAIL;;AACA,eAAKf,KAAL,CAAWW,IAAI,CAAC3B,IAAhB,EAAsBgC,IAAtB,CAA2BL,IAA3B;AACA,eAAKjC,MAAL,CAAYiC,IAAI,CAACzB,IAAjB,EAAuB8B,IAAvB,CAA4BL,IAA5B;AACD;AACF;;AAED,WAAKjC,MAAL,CAAYuC,OAAZ;AACA,WAAKC,UAAL,GAAkB,KAAKC,KAAL,EAAlB;AACD;AAED;;;;;;;AAKAC,IAAAA,OAAO,CAAC5B,CAAD,EAAI;AACT,UAAI,KAAKN,IAAL,GAAYM,CAAC,CAACN,IAAlB,EAAwB;AACtB,eAAO,CAAP;AACD,OAFD,MAEO,IAAI,KAAKA,IAAL,GAAYM,CAAC,CAACN,IAAlB,EAAwB;AAC7B,eAAO,CAAC,CAAR;AACD;;AAED,UAAImC,MAAM,GAAG,CAAb;;AACA,WAAK,IAAIb,CAAC,GAAC,CAAX,EAAcA,CAAC,IAAE,CAAjB,EAAoBA,CAAC,EAArB,EAAyB;AACvB,YAAI,KAAKb,KAAL,CAAWa,CAAX,KAAiBhB,CAAC,CAACG,KAAF,CAAQa,CAAR,CAAjB,IAA+B,KAAKb,KAAL,CAAWa,CAAX,EAActB,IAAd,GAAqBM,CAAC,CAACG,KAAF,CAAQa,CAAR,EAAWtB,IAAnE,EAAyE;AACvEmC,UAAAA,MAAM,GAAG,CAAT;AACA;AACD,SAHD,MAGO,IAAI,KAAK1B,KAAL,CAAWa,CAAX,KAAiBhB,CAAC,CAACG,KAAF,CAAQa,CAAR,CAAjB,IAA+B,KAAKb,KAAL,CAAWa,CAAX,EAActB,IAAd,GAAqBM,CAAC,CAACG,KAAF,CAAQa,CAAR,EAAWtB,IAAnE,EAAyE;AAC9EmC,UAAAA,MAAM,GAAG,CAAC,CAAV;AACA;AACD;AACF;;AAED,aAAOA,MAAP;AACD;AAED;;;;;;;AAKAC,IAAAA,MAAM,CAACC,IAAD,EAAO;AACX,aAAQ,KAAKH,OAAL,CAAaG,IAAb,IAAqB,CAA7B;AACD;AAED;;;;;;;AAKAC,IAAAA,iBAAiB,CAACC,GAAD,EAAM;AACrB,UAAI9B,KAAK,GAAG,KAAKjB,MAAL,CAAY+C,GAAZ,CAAZ;AACA,UAAIC,gBAAgB,GAAI/B,KAAD,GAAUA,KAAK,CAACY,MAAhB,GAAyB,CAAhD;;AAEA,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAKP,KAAL,CAAWM,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtC,YAAI,KAAKP,KAAL,CAAWO,CAAX,EAActB,IAAd,GAAqB,CAAC,CAA1B,EAA6B;AAC3B;AACD,SAFD,MAEO,IAAIS,KAAJ,EAAW;AAChB,cAAI,KAAKE,IAAL,CAAU8B,UAAV,KAAyB,CAAzB,IAA8BhC,KAAK,CAAC,CAAD,CAAL,CAAST,IAAT,KAAkBR,MAAM,CAAC6B,MAAP,GAAgB,CAApE,EAAuE;AACrEmB,YAAAA,gBAAgB,IAAI,CAApB;AACD;AACF,SAJM,MAIA,IAAI,KAAK7B,IAAL,CAAU8B,UAAV,KAAyB,CAAzB,IAA8BF,GAAG,KAAK/C,MAAM,CAAC6B,MAAP,GAAgB,CAA1D,EAA6D;AAClEmB,UAAAA,gBAAgB,IAAI,CAApB;AACD;AACF;;AAED,aAAOA,gBAAP;AACD;AAED;;;;;;;;AAMAE,IAAAA,gBAAgB,CAAC5C,IAAD,EAAO6C,QAAP,EAAiB;AAC/B,UAAIlC,KAAK,GAAG,CAAC,KAAKK,KAAL,CAAWhB,IAAX,KAAoB,EAArB,EAAyBO,IAAzB,CAA8BZ,IAAI,CAACY,IAAnC,CAAZ;;AAEA,WAAK,IAAIiB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAKP,KAAL,CAAWM,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtC,YAAIsB,IAAI,GAAG,KAAK7B,KAAL,CAAWO,CAAX,CAAX;;AAEA,YAAIqB,QAAJ,EAAc;AACZ,cAAIE,CAAC,GAAC,CAAN;;AACA,iBAAOA,CAAC,GAACrD,MAAM,CAAC6B,MAAT,IAAmBwB,CAAC,GAACpC,KAAK,CAACY,MAAlC,EAA0C;AACxC,gBAAIZ,KAAK,CAACoC,CAAD,CAAL,CAAS7C,IAAT,KAAkBR,MAAM,CAAC6B,MAAP,GAAc,CAAd,GAAgBwB,CAAtC,EAAyC;AACvCA,cAAAA,CAAC,IAAI,CAAL;AACD,aAFD,MAEO;AACL;AACD;AACF;;AACDD,UAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAc,CAAd,GAAgBwB,CAA5B;AACAD,UAAAA,IAAI,CAAC1C,SAAL,GAAiBV,MAAM,CAACoD,IAAI,CAAC5C,IAAN,CAAvB;AACD;;AAEDS,QAAAA,KAAK,CAACqB,IAAN,CAAWc,IAAX;AACAnC,QAAAA,KAAK,GAAGA,KAAK,CAACJ,IAAN,CAAWZ,IAAI,CAACY,IAAhB,CAAR;AACD;;AAED,aAAOI,KAAP;AACD;AAED;;;;;AAGAqC,IAAAA,cAAc,GAAG;AACf,WAAK,IAAIxB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAKP,KAAL,CAAWM,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtC,aAAKP,KAAL,CAAWO,CAAX,EAActB,IAAd,GAAqB,CAAC,CAAtB;AACA,aAAKe,KAAL,CAAWO,CAAX,EAAcpB,SAAd,GAA0B,KAAKa,KAAL,CAAWO,CAAX,EAAc1B,KAAxC;AACD;AACF;AAED;;;;;;AAIAmD,IAAAA,WAAW,GAAG;AACZ,UAAIC,KAAJ;AACA,UAAIC,SAAS,GAAG,EAAhB;AACAA,MAAAA,SAAS,GAAGA,SAAS,CAACC,MAAV,CAAiB,KAAKzC,KAAtB,CAAZ;AAEAuC,MAAAA,KAAK,GAAG,KAAKnC,QAAL,CAAcsC,MAAd,CAAqB,UAAS1B,IAAT,EAAe;AAC1C,YAAIwB,SAAS,CAAChD,OAAV,CAAkBwB,IAAlB,IAA0B,CAA9B,EAAiC;AAC/B,iBAAO,IAAP;AACD;AACF,OAJO,CAAR,CALY,CAWZ;;AACA,UAAI,KAAKd,IAAL,CAAU8B,UAAV,KAAyB,CAA7B,EAAgC;AAC9B,aAAK,IAAInB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC0B,KAAK,CAAC3B,MAAtB,EAA8BC,CAAC,EAA/B,EAAmC;AACjC,cAAIG,IAAI,GAAGuB,KAAK,CAAC1B,CAAD,CAAhB;;AACA,cAAIG,IAAI,CAACzB,IAAL,KAAc,CAAC,CAAnB,EAAsB;AACpByB,YAAAA,IAAI,CAACvB,SAAL,GAAiB,GAAjB;AACAuB,YAAAA,IAAI,CAACzB,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD;AACF;;AACD2B,QAAAA,KAAK,GAAGA,KAAK,CAAC3C,IAAN,CAAWZ,IAAI,CAACY,IAAhB,CAAR;AACD;;AAED,aAAO2C,KAAP;AACD;AAED;;;;;;AAIA7C,IAAAA,QAAQ,GAAG;AACT,UAAIM,KAAK,GAAG,KAAKA,KAAL,CAAWc,GAAX,CAAe,UAASC,CAAT,EAAY;AACrC,eAAOA,CAAC,CAACrB,QAAF,EAAP;AACD,OAFW,CAAZ;AAIA,aAAOM,KAAK,CAAC2C,IAAN,CAAW,IAAX,CAAP;AACD;AAED;;;;;;AAIAC,IAAAA,OAAO,GAAG;AACR,UAAI5C,KAAK,GAAG,KAAKA,KAAL,CAAWc,GAAX,CAAe,UAASC,CAAT,EAAY;AACrC,eAAOA,CAAC,CAACrB,QAAF,EAAP;AACD,OAFW,CAAZ;AAIA,aAAOM,KAAP;AACD;AAED;;;;;;AAIA6C,IAAAA,aAAa,GAAG;AACd,UAAI,CAAC,KAAK3C,IAAL,CAAUO,eAAX,IAA8B,KAAKD,eAAvC,EAAwD;AACtD,eAAO,IAAP;AACD;;AAED,aAAQ,KAAKiB,OAAL,CAAa1B,IAAI,CAACyB,KAAL,CAAW,KAAKtB,IAAL,CAAUO,eAArB,EAAsC,KAAKP,IAA3C,CAAb,KAAkE,CAA1E;AACD;AAED;;;;;;;AAKA,WAAO4C,OAAP,CAAeC,KAAf,EAAsB;AACpBA,MAAAA,KAAK,GAAGA,KAAK,CAACL,MAAN,CAAa,UAASM,CAAT,EAAY;AAC/B,eAAOA,CAAC,CAACH,aAAF,EAAP;AACD,OAFO,CAAR;AAIA,UAAII,WAAW,GAAGC,IAAI,CAACC,GAAL,CAASC,KAAT,CAAeF,IAAf,EAAqBH,KAAK,CAACjC,GAAN,CAAU,UAASkC,CAAT,EAAY;AAC3D,eAAOA,CAAC,CAACzD,IAAT;AACD,OAFsC,CAArB,CAAlB;AAIAwD,MAAAA,KAAK,GAAGA,KAAK,CAACL,MAAN,CAAa,UAASM,CAAT,EAAY;AAC/B,eAAOA,CAAC,CAACzD,IAAF,KAAW0D,WAAlB;AACD,OAFO,CAAR;AAIAF,MAAAA,KAAK,GAAGA,KAAK,CAACL,MAAN,CAAa,UAASM,CAAT,EAAY;AAC/B,YAAIK,IAAI,GAAG,KAAX;;AACA,aAAK,IAAIxC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACkC,KAAK,CAACnC,MAAtB,EAA8BC,CAAC,EAA/B,EAAmC;AACjCwC,UAAAA,IAAI,GAAGL,CAAC,CAACrB,MAAF,CAASoB,KAAK,CAAClC,CAAD,CAAd,CAAP;;AACA,cAAIwC,IAAJ,EAAU;AACR;AACD;AACF;;AAED,eAAO,CAACA,IAAR;AACD,OAVO,CAAR;AAYA,aAAON,KAAP;AACD;AAED;;;;;;;;;AAOA,WAAOvB,KAAP,CAAaxB,KAAb,EAAoBE,IAApB,EAA0BC,aAA1B,EAAyC;AACvCD,MAAAA,IAAI,GAAGA,IAAI,IAAI,UAAf;AACAA,MAAAA,IAAI,GAAI,OAAOA,IAAP,KAAgB,QAAjB,GAA6B,IAAIoD,IAAJ,CAASpD,IAAT,CAA7B,GAA8CA,IAArD;AACAF,MAAAA,KAAK,GAAGA,KAAK,IAAI,CAAC,EAAD,CAAjB;AAEA,UAAI+C,KAAK,GAAG7C,IAAI,CAACS,UAAjB;AACA,UAAIe,MAAM,GAAG,IAAb;;AAEA,WAAK,IAAIb,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACkC,KAAK,CAACnC,MAAtB,EAA8BC,CAAC,EAA/B,EAAmC;AACjCa,QAAAA,MAAM,GAAG,IAAIqB,KAAK,CAAClC,CAAD,CAAT,CAAab,KAAb,EAAoBE,IAApB,EAA0BC,aAA1B,CAAT;;AACA,YAAIuB,MAAM,CAACH,UAAX,EAAuB;AACrB;AACD;AACF;;AAED,aAAOG,MAAP;AACD;AAED;;;;;;;;AAMA,WAAO6B,UAAP,CAAkBvD,KAAlB,EAAyBE,IAAzB,EAA+B;AAC7B,UAAIc,IAAJ,EAAUV,KAAV,EAAiBkD,QAAjB;AACAxD,MAAAA,KAAK,GAAGA,KAAK,IAAI,CAAC,EAAD,CAAjB;AACAM,MAAAA,KAAK,GAAG,EAAR;AACAkD,MAAAA,QAAQ,GAAG,EAAX;;AAEA,WAAK,IAAI3C,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACb,KAAK,CAACY,MAAtB,EAA8BC,CAAC,EAA/B,EAAmC;AACjCG,QAAAA,IAAI,GAAGhB,KAAK,CAACa,CAAD,CAAZ;;AACA,YAAIG,IAAI,CAACzB,IAAL,KAAc,CAAC,CAAnB,EAAsB;AACpBe,UAAAA,KAAK,CAACe,IAAN,CAAWrB,KAAK,CAACa,CAAD,CAAhB;AACD,SAFD,MAEO;AACL2C,UAAAA,QAAQ,CAACnC,IAAT,CAAcrB,KAAK,CAACa,CAAD,CAAnB;AACD;AACF;;AAED,aAAO,CAACP,KAAD,EAAQkD,QAAR,CAAP;AACD;;AAvTQ;;AA0TX,QAAMC,aAAN,SAA4B1D,IAA5B,CAAiC;AAC/Bd,IAAAA,WAAW,CAACe,KAAD,EAAQE,IAAR,EAAcC,aAAd,EAA6B;AACtC,YAAMH,KAAN,EAAa,gBAAb,EAA+BE,IAA/B,EAAqCC,aAArC;AACD;;AAEDqB,IAAAA,KAAK,GAAG;AACN,UAAIxB,KAAJ;AACA,WAAKqC,cAAL;AACA,UAAIqB,gBAAgB,GAAG,IAAvB;AACA,UAAIC,QAAQ,GAAG,EAAf;;AAEA,WAAK,IAAItE,IAAT,IAAiB,KAAKgB,KAAtB,EAA6B;AAC3BL,QAAAA,KAAK,GAAG,KAAKiC,gBAAL,CAAsB5C,IAAtB,EAA4B,KAA5B,CAAR;;AACA,YAAIW,KAAK,IAAIA,KAAK,CAACY,MAAN,IAAgB,KAAKV,IAAL,CAAU0D,SAAvC,EAAkD;AAChDF,UAAAA,gBAAgB,GAAG1D,KAAnB;AACA;AACD;AACF;;AAED,UAAI0D,gBAAJ,EAAsB;AACpB,YAAI,KAAKxD,IAAL,CAAU2D,KAAV,KAAoB,UAAxB,EAAoC;AAClC,eAAK,IAAIxE,IAAT,IAAiB,KAAKgB,KAAtB,EAA6B;AAC3B,gBAAIqD,gBAAgB,CAAC,CAAD,CAAhB,CAAoBrE,IAApB,KAA6BA,IAAjC,EAAuC;AACrCsE,cAAAA,QAAQ,GAAGA,QAAQ,CAAClB,MAAT,CAAgB,KAAKpC,KAAL,CAAWhB,IAAX,KAAoB,EAApC,CAAX;AACAsE,cAAAA,QAAQ,GAAG5D,IAAI,CAACwD,UAAL,CAAgBI,QAAhB,EAA0B,KAAKzD,IAA/B,EAAqC,CAArC,CAAX;AACD;AACF;AACF;;AACD,YAAI4D,QAAQ,GAAG,IAAIC,QAAJ,CAAaL,gBAAb,EAA+B,KAAKxD,IAApC,CAAf;;AACA,YAAI4D,QAAQ,CAACvC,UAAb,EAAyB;AACvB,eAAKvB,KAAL,GAAa8D,QAAQ,CAAC9D,KAAtB;AACA,eAAKA,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkBkB,QAAlB,CAAb;AACA,eAAKpD,QAAL,GAAgBuD,QAAQ,CAACvD,QAAzB;AACD;AACF;;AAED,UAAI,KAAKP,KAAL,CAAW,CAAX,KAAiB,KAAKA,KAAL,CAAW,CAAX,EAAcT,IAAd,KAAuB,EAA5C,EAAgD;AAC9C,aAAKsE,KAAL,GAAa,aAAb;AACD,OAFD,MAEO,IAAI,KAAK7D,KAAL,CAAWY,MAAX,IAAqB,KAAKV,IAAL,CAAU0D,SAAnC,EAA8C;AACnD,aAAKC,KAAL,GAAa,KAAK5D,IAAL,GAAY,IAAZ,GAAmB,KAAKD,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,CAAnB,GAA2D3E,IAA3D,GAAkE,OAA/E;AACD;;AAED,aAAO,KAAKW,KAAL,CAAWY,MAAX,IAAqB,KAAKV,IAAL,CAAU0D,SAAtC;AACD;;AA3C8B;;AA8CjC,QAAMK,UAAN,SAAyBR,aAAzB,CAAuC;AACrCxE,IAAAA,WAAW,CAACe,KAAD,EAAQE,IAAR,EAAcC,aAAd,EAA6B;AACtC,YAAMH,KAAN,EAAaE,IAAb,EAAmBC,aAAnB;AACD;;AAEDqB,IAAAA,KAAK,GAAG;AACN,WAAKa,cAAL;AACA,UAAIX,MAAM,GAAG,MAAMF,KAAN,EAAb;AACA,aAAOE,MAAM,IAAI,KAAKmC,KAAL,KAAe,aAAhC;AACD;;AAToC;;AAYvC,QAAMK,iBAAN,SAAgCD,UAAhC,CAA2C;AACzChF,IAAAA,WAAW,CAACe,KAAD,EAAQE,IAAR,EAAcC,aAAd,EAA6B;AACtC,YAAMH,KAAN,EAAaE,IAAb,EAAmBC,aAAnB;AACD;;AAEDqB,IAAAA,KAAK,GAAG;AACN,UAAIX,CAAC,GAAG,CAAR;AACA,WAAKwB,cAAL;AACA,UAAIX,MAAM,GAAG,MAAMF,KAAN,EAAb;;AACA,UAAIE,MAAM,IAAI,KAAK1B,KAAnB,EAA0B;AACxB,aAAKa,CAAC,GAAC,CAAP,EAAUA,CAAC,GAAC,KAAKX,IAAL,CAAU0D,SAAZ,IAAyB/C,CAAC,GAAC,KAAKb,KAAL,CAAWY,MAAhD,EAAwDC,CAAC,EAAzD,EAA6D;AAC3D,cAAI,KAAKb,KAAL,CAAWa,CAAX,EAAc1B,KAAd,KAAwB,KAAKe,IAAL,CAAUT,SAAtC,EAAiD;AAC/CiC,YAAAA,MAAM,GAAG,KAAT;AACA,iBAAKmC,KAAL,GAAa,kBAAb;AACA;AACD;AACF;;AACD,YAAIhD,CAAC,KAAK,KAAKX,IAAL,CAAU0D,SAApB,EAA+B;AAC7B,eAAKC,KAAL,GAAa,aAAb;AACD;AACF;;AACD,aAAOnC,MAAP;AACD;;AAtBwC;;AAyB3C,QAAMyC,cAAN,SAA6BF,UAA7B,CAAwC;AACtChF,IAAAA,WAAW,CAACe,KAAD,EAAQE,IAAR,EAAcC,aAAd,EAA6B;AACtC,YAAMH,KAAN,EAAaE,IAAb,EAAmBC,aAAnB;AACD;;AAEDqB,IAAAA,KAAK,GAAG;AACN,UAAIX,CAAC,GAAG,CAAR;AACA,WAAKwB,cAAL;AACA,UAAIX,MAAM,GAAG,MAAMF,KAAN,EAAb;;AACA,UAAIE,MAAM,IAAI,KAAK1B,KAAnB,EAA0B;AACxB,aAAKa,CAAC,GAAC,CAAP,EAAUA,CAAC,GAAC,KAAKX,IAAL,CAAU0D,SAAZ,IAAyB/C,CAAC,GAAC,KAAKb,KAAL,CAAWY,MAAhD,EAAwDC,CAAC,EAAzD,EAA6D;AAC3D,cAAI,KAAKb,KAAL,CAAWa,CAAX,EAAc1B,KAAd,KAAwB,KAAKe,IAAL,CAAUT,SAAtC,EAAiD;AAC/C,iBAAKoE,KAAL,GAAa,kBAAb;AACA;AACD;AACF;;AACD,YAAIhD,CAAC,KAAK,KAAKX,IAAL,CAAU0D,SAApB,EAA+B;AAC7BlC,UAAAA,MAAM,GAAG,KAAT;AACA,eAAKmC,KAAL,GAAa,aAAb;AACD;AACF;;AACD,aAAOnC,MAAP;AACD;;AAtBqC;;AAyBxC,QAAM0C,WAAN,SAA0BrE,IAA1B,CAA+B;AAC7Bd,IAAAA,WAAW,CAACe,KAAD,EAAQE,IAAR,EAAcC,aAAd,EAA6B;AACtC,YAAMH,KAAN,EAAa,gBAAb,EAA+BE,IAA/B,EAAqCC,aAArC;AACD;;AAEDqB,IAAAA,KAAK,GAAG;AACN,WAAKa,cAAL;;AAEA,WAAK,IAAIxB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,MAAL,CAAY6B,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACvC,YAAI,KAAKgB,iBAAL,CAAuBhB,CAAvB,MAA8B,CAAlC,EAAqC;AACnC,eAAKb,KAAL,GAAa,KAAKjB,MAAL,CAAY8B,CAAZ,KAAkB,EAA/B;;AACA,eAAK,IAAIuB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,KAAL,CAAWM,MAAb,IAAuB,KAAKZ,KAAL,CAAWY,MAAX,GAAkB,CAAvD,EAA0DwB,CAAC,EAA3D,EAA+D;AAC7D,gBAAID,IAAI,GAAG,KAAK7B,KAAL,CAAW8B,CAAX,CAAX;;AACA,gBAAI,KAAKpC,KAAT,EAAgB;AACdmC,cAAAA,IAAI,CAAC5C,IAAL,GAAY,KAAKS,KAAL,CAAW,CAAX,EAAcT,IAA1B;AACD,aAFD,MAEO;AACL4C,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD;;AACDuB,YAAAA,IAAI,CAAC1C,SAAL,GAAiBV,MAAM,CAACoD,IAAI,CAAC5C,IAAN,CAAvB;AACA,iBAAKS,KAAL,CAAWqB,IAAX,CAAgBc,IAAhB;AACD;;AACD,eAAKnC,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkB,KAAKH,WAAL,GAAmB0B,KAAnB,CAAyB,CAAzB,EAA4B,KAAK9D,IAAL,CAAUmE,WAAV,GAAsB,CAAlD,CAAlB,CAAb;AACA;AACD;AACF;;AAED,UAAI,KAAKrE,KAAL,CAAWY,MAAX,IAAqB,CAAzB,EAA4B;AAC1B,aAAKiD,KAAL,GAAa,KAAK5D,IAAL,GAAY,IAAZ,GAAmB,KAAKD,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,CAAnB,GAA2D,KAAxE;AACD;;AAED,aAAO,KAAKhE,KAAL,CAAWY,MAAX,IAAqB,CAA5B;AACD;;AA/B4B;;AAkC/B,QAAM0D,mBAAN,SAAkCvE,IAAlC,CAAuC;AACrCd,IAAAA,WAAW,CAACe,KAAD,EAAQE,IAAR,EAAcC,aAAd,EAA6B;AACtC,YAAMH,KAAN,EAAa,oCAAb,EAAmDE,IAAnD,EAAyDC,aAAzD;AACD;;AAEDqB,IAAAA,KAAK,GAAG;AACN,UAAIxB,KAAJ;AACA,WAAKqC,cAAL;;AAEA,WAAK,IAAIxB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,MAAL,CAAY6B,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACvC,YAAI,KAAKgB,iBAAL,CAAuBhB,CAAvB,MAA8B,CAAlC,EAAqC;AACnC,eAAKb,KAAL,GAAa,KAAKjB,MAAL,CAAY8B,CAAZ,KAAkB,EAA/B;;AACA,eAAK,IAAIuB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,KAAL,CAAWM,MAAb,IAAuB,KAAKZ,KAAL,CAAWY,MAAX,GAAkB,CAAvD,EAA0DwB,CAAC,EAA3D,EAA+D;AAC7D,gBAAID,IAAI,GAAG,KAAK7B,KAAL,CAAW8B,CAAX,CAAX;;AACA,gBAAI,KAAKpC,KAAT,EAAgB;AACdmC,cAAAA,IAAI,CAAC5C,IAAL,GAAY,KAAKS,KAAL,CAAW,CAAX,EAAcT,IAA1B;AACD,aAFD,MAEO;AACL4C,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD;;AACDuB,YAAAA,IAAI,CAAC1C,SAAL,GAAiBV,MAAM,CAACoD,IAAI,CAAC5C,IAAN,CAAvB;AACA,iBAAKS,KAAL,CAAWqB,IAAX,CAAgBc,IAAhB;AACD;;AACD;AACD;AACF;;AAED,UAAI,KAAKnC,KAAL,CAAWY,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,aAAKC,CAAC,GAAC,CAAP,EAAUA,CAAC,GAAC,KAAK9B,MAAL,CAAY6B,MAAxB,EAAgCC,CAAC,EAAjC,EAAqC;AACnCb,UAAAA,KAAK,GAAG,KAAKjB,MAAL,CAAY8B,CAAZ,CAAR;;AACA,cAAIb,KAAK,IAAI,KAAKA,KAAL,CAAW,CAAX,EAAcP,SAAd,KAA4BO,KAAK,CAAC,CAAD,CAAL,CAASP,SAAlD,EAA6D;AAC3D;AACD;;AACD,cAAI,KAAKoC,iBAAL,CAAuBhB,CAAvB,KAA6B,CAAjC,EAAoC;AAClC,iBAAKb,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkBzC,KAAK,IAAI,EAA3B,CAAb;;AACA,iBAAK,IAAIoC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,KAAL,CAAWM,MAA3B,EAAmCwB,CAAC,EAApC,EAAwC;AACtC,kBAAID,IAAI,GAAG,KAAK7B,KAAL,CAAW8B,CAAX,CAAX;;AACA,kBAAID,IAAI,CAAC5C,IAAL,KAAc,CAAC,CAAnB,EAAsB;AACpB;AACD;;AACD,kBAAIS,KAAJ,EAAW;AACTmC,gBAAAA,IAAI,CAAC5C,IAAL,GAAYS,KAAK,CAAC,CAAD,CAAL,CAAST,IAArB;AACD,eAFD,MAEO,IAAI,KAAKS,KAAL,CAAW,CAAX,EAAcT,IAAd,KAAuBR,MAAM,CAAC6B,MAAP,GAAgB,CAAvC,IAA4C,KAAKV,IAAL,CAAU8B,UAAV,KAAyB,CAAzE,EAA4E;AACjFG,gBAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD,eAFM,MAEA;AACLuB,gBAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD;;AACDuB,cAAAA,IAAI,CAAC1C,SAAL,GAAiBV,MAAM,CAACoD,IAAI,CAAC5C,IAAN,CAAvB;AACA,mBAAKS,KAAL,CAAWqB,IAAX,CAAgBc,IAAhB;AACD;;AACD,iBAAKnC,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkB,KAAKH,WAAL,GAAmB0B,KAAnB,CAAyB,CAAzB,EAA4B,KAAK9D,IAAL,CAAUmE,WAAV,GAAsB,CAAlD,CAAlB,CAAb;AACA;AACD;AACF;AACF;;AAED,UAAI,KAAKrE,KAAL,CAAWY,MAAX,IAAqB,CAAzB,EAA4B;AAC1B,YAAI2D,IAAI,GAAG,KAAKvE,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,IAAwC,WAAxC,GAAsD,KAAKhE,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,CAAtD,GAA8F,KAAzG;AACA,aAAKH,KAAL,GAAa,KAAK5D,IAAL,GAAY,IAAZ,GAAmBsE,IAAhC;AACD;;AAED,aAAO,KAAKvE,KAAL,CAAWY,MAAX,IAAqB,CAA5B;AACD;;AA7DoC;;AAgEvC,QAAM4D,WAAN,SAA0BzE,IAA1B,CAA+B;AAC7Bd,IAAAA,WAAW,CAACe,KAAD,EAAQE,IAAR,EAAcC,aAAd,EAA6B;AACtC,YAAMH,KAAN,EAAa,gBAAb,EAA+BE,IAA/B,EAAqCC,aAArC;AACD;;AAEDqB,IAAAA,KAAK,GAAG;AACN,WAAKa,cAAL;;AAEA,WAAK,IAAIxB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,MAAL,CAAY6B,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACvC,YAAI,KAAKgB,iBAAL,CAAuBhB,CAAvB,MAA8B,CAAlC,EAAqC;AACnC,eAAKb,KAAL,GAAa,KAAKjB,MAAL,CAAY8B,CAAZ,KAAkB,EAA/B;;AACA,eAAK,IAAIuB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,KAAL,CAAWM,MAAb,IAAuB,KAAKZ,KAAL,CAAWY,MAAX,GAAkB,CAAvD,EAA0DwB,CAAC,EAA3D,EAA+D;AAC7D,gBAAID,IAAI,GAAG,KAAK7B,KAAL,CAAW8B,CAAX,CAAX;;AACA,gBAAI,KAAKpC,KAAT,EAAgB;AACdmC,cAAAA,IAAI,CAAC5C,IAAL,GAAY,KAAKS,KAAL,CAAW,CAAX,EAAcT,IAA1B;AACD,aAFD,MAEO;AACL4C,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD;;AACDuB,YAAAA,IAAI,CAAC1C,SAAL,GAAiBV,MAAM,CAACoD,IAAI,CAAC5C,IAAN,CAAvB;AACA,iBAAKS,KAAL,CAAWqB,IAAX,CAAgBc,IAAhB;AACD;;AAED,eAAKnC,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkB,KAAKH,WAAL,GAAmB0B,KAAnB,CAAyB,CAAzB,EAA4B,KAAK9D,IAAL,CAAUmE,WAAV,GAAsB,CAAlD,CAAlB,CAAb;AACA;AACD;AACF;;AAED,UAAI,KAAKrE,KAAL,CAAWY,MAAX,IAAqB,CAAzB,EAA4B;AAC1B,YAAI,KAAKV,IAAL,CAAUuE,SAAd,EAAyB;AACvB,eAAKzE,KAAL,CAAWY,MAAX,GAAoB,CAApB;AACD;;AAED,aAAKiD,KAAL,GAAa,KAAK5D,IAAL,GAAY,IAAZ,GAAmB,KAAKD,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,CAAnB,GAA2D,KAAxE;AACD;;AAED,aAAO,KAAKhE,KAAL,CAAWY,MAAX,IAAqB,CAA5B;AACD;;AApC4B;;AAuC/B,QAAM8D,SAAN,SAAwB3E,IAAxB,CAA6B;AAC3Bd,IAAAA,WAAW,CAACe,KAAD,EAAQE,IAAR,EAAcC,aAAd,EAA6B;AACtC,YAAMH,KAAN,EAAa,iBAAb,EAAgCE,IAAhC,EAAsCC,aAAtC;AACD;;AAEDqB,IAAAA,KAAK,GAAG;AACN,UAAI,KAAKlB,KAAL,CAAWM,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,aAAKZ,KAAL,GAAa,KAAKM,KAAlB;AACA,aAAKN,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkB,KAAKH,WAAL,GAAmB0B,KAAnB,CAAyB,CAAzB,EAA4B,KAAK9D,IAAL,CAAUmE,WAAV,GAAsB,CAAlD,CAAlB,CAAb;AACD;;AAED,UAAI,KAAKrE,KAAL,CAAWY,MAAX,IAAqB,CAAzB,EAA4B;AAC1B,YAAI,KAAKV,IAAL,CAAUuE,SAAd,EAAyB;AACvB,eAAKzE,KAAL,CAAWY,MAAX,GAAoB,CAApB;AACD;;AAED,aAAKiD,KAAL,GAAa,KAAK5D,IAAlB;AACD;;AAED,aAAO,KAAKD,KAAL,CAAWY,MAAX,IAAqB,CAA5B;AACD;;AApB0B;;AAuB7B,QAAM+D,mBAAN,SAAkC5E,IAAlC,CAAuC;AACrCd,IAAAA,WAAW,CAACe,KAAD,EAAQE,IAAR,EAAcC,aAAd,EAA6B;AACtC,YAAMH,KAAN,EAAa,+BAAb,EAA8CE,IAA9C,EAAoDC,aAApD;AACD;;AAEDqB,IAAAA,KAAK,GAAG;AACN,UAAIxB,KAAJ;AACA,WAAKqC,cAAL;;AAEA,WAAK,IAAIxB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,MAAL,CAAY6B,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACvC,YAAI,KAAKgB,iBAAL,CAAuBhB,CAAvB,MAA8B,CAAlC,EAAqC;AACnC,eAAKb,KAAL,GAAa,KAAKjB,MAAL,CAAY8B,CAAZ,KAAkB,EAA/B;;AACA,eAAK,IAAIuB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,KAAL,CAAWM,MAAb,IAAuB,KAAKZ,KAAL,CAAWY,MAAX,GAAkB,CAAvD,EAA0DwB,CAAC,EAA3D,EAA+D;AAC7D,gBAAID,IAAI,GAAG,KAAK7B,KAAL,CAAW8B,CAAX,CAAX;;AACA,gBAAI,KAAKpC,KAAT,EAAgB;AACdmC,cAAAA,IAAI,CAAC5C,IAAL,GAAY,KAAKS,KAAL,CAAW,CAAX,EAAcT,IAA1B;AACD,aAFD,MAEO;AACL4C,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD;;AACDuB,YAAAA,IAAI,CAAC1C,SAAL,GAAiBV,MAAM,CAACoD,IAAI,CAAC5C,IAAN,CAAvB;AACA,iBAAKS,KAAL,CAAWqB,IAAX,CAAgBc,IAAhB;AACD;;AACD;AACD;AACF;;AAED,UAAI,KAAKnC,KAAL,CAAWY,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,aAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,MAAL,CAAY6B,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACvC,cAAIb,KAAK,GAAG,KAAKjB,MAAL,CAAY8B,CAAZ,CAAZ;;AACA,cAAIb,KAAK,IAAI,KAAKA,KAAL,CAAW,CAAX,EAAcP,SAAd,KAA4BO,KAAK,CAAC,CAAD,CAAL,CAASP,SAAlD,EAA6D;AAC3D;AACD;;AACD,cAAI,KAAKO,KAAL,CAAWY,MAAX,GAAoB,CAApB,IAAyB,KAAKiB,iBAAL,CAAuBhB,CAAvB,MAA8B,CAA3D,EAA8D;AAC5D,iBAAKb,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkBzC,KAAK,IAAI,EAA3B,CAAb;;AACA,iBAAK,IAAIoC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,KAAL,CAAWM,MAA3B,EAAmCwB,CAAC,EAApC,EAAwC;AACtC,kBAAID,IAAI,GAAG,KAAK7B,KAAL,CAAW8B,CAAX,CAAX;;AACA,kBAAID,IAAI,CAAC5C,IAAL,KAAc,CAAC,CAAnB,EAAsB;AACpB;AACD;;AACD,kBAAIS,KAAJ,EAAW;AACTmC,gBAAAA,IAAI,CAAC5C,IAAL,GAAYS,KAAK,CAAC,CAAD,CAAL,CAAST,IAArB;AACD,eAFD,MAEO,IAAI,KAAKS,KAAL,CAAW,CAAX,EAAcT,IAAd,KAAuBR,MAAM,CAAC6B,MAAP,GAAgB,CAAvC,IAA4C,KAAKV,IAAL,CAAU8B,UAAV,KAAyB,CAAzE,EAA4E;AACjFG,gBAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD,eAFM,MAEA;AACLuB,gBAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD;;AACDuB,cAAAA,IAAI,CAAC1C,SAAL,GAAiBV,MAAM,CAACoD,IAAI,CAAC5C,IAAN,CAAvB;AACA,mBAAKS,KAAL,CAAWqB,IAAX,CAAgBc,IAAhB;AACD;;AACD,iBAAKnC,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkB,KAAKH,WAAL,GAAmB0B,KAAnB,CAAyB,CAAzB,EAA4B,KAAK9D,IAAL,CAAUmE,WAAV,GAAsB,CAAlD,CAAlB,CAAb;AACA;AACD,WAnBD,MAmBO,IAAI,KAAKxC,iBAAL,CAAuBhB,CAAvB,MAA8B,CAAlC,EAAqC;AAC1C,iBAAKb,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkBzC,KAAlB,CAAb;;AACA,iBAAK,IAAIoC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,KAAL,CAAWM,MAA3B,EAAmCwB,CAAC,EAApC,EAAwC;AACtC,kBAAID,IAAI,GAAG,KAAK7B,KAAL,CAAW8B,CAAX,CAAX;;AACA,kBAAID,IAAI,CAAC5C,IAAL,KAAc,CAAC,CAAnB,EAAsB;AACpB;AACD;;AACD,kBAAIS,KAAJ,EAAW;AACTmC,gBAAAA,IAAI,CAAC5C,IAAL,GAAYS,KAAK,CAAC,CAAD,CAAL,CAAST,IAArB;AACD,eAFD,MAEO,IAAI,KAAKS,KAAL,CAAW,CAAX,EAAcT,IAAd,KAAuBR,MAAM,CAAC6B,MAAP,GAAgB,CAAvC,IAA4C,KAAKV,IAAL,CAAU8B,UAAV,KAAyB,CAAzE,EAA4E;AACjFG,gBAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD,eAFM,MAEA;AACLuB,gBAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD;;AACDuB,cAAAA,IAAI,CAAC1C,SAAL,GAAiBV,MAAM,CAACoD,IAAI,CAAC5C,IAAN,CAAvB;AACA,mBAAKS,KAAL,CAAWqB,IAAX,CAAgBc,IAAhB;AACD;AACF;AACF;AACF;;AAED,UAAI,KAAKnC,KAAL,CAAWY,MAAX,IAAqB,CAAzB,EAA4B;AAC1B,YAAI2D,IAAI,GAAG,KAAKvE,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,IAAwC,WAAxC,GAAsD,KAAKhE,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,CAAtD,GAA8F,QAA9F,GAAyG,KAAKhE,KAAL,CAAW,CAAX,EAAcb,KAAvH,GAA+H,KAA1I;AACA,aAAK0E,KAAL,GAAa,KAAK5D,IAAL,GAAY,IAAZ,GAAmBsE,IAAhC;AACD;;AAED,aAAO,KAAKvE,KAAL,CAAWY,MAAX,IAAqB,CAA5B;AACD;;AA9EoC;;AAiFvC,QAAMgE,SAAN,SAAwB7E,IAAxB,CAA6B;AAC3Bd,IAAAA,WAAW,CAACe,KAAD,EAAQE,IAAR,EAAcC,aAAd,EAA6B;AACtC,YAAMH,KAAN,EAAa,YAAb,EAA2BE,IAA3B,EAAiCC,aAAjC;AACD;;AAEDqB,IAAAA,KAAK,GAAG;AACN,UAAIxB,KAAJ;AACA,WAAKqC,cAAL;;AAEA,WAAK,IAAIxB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,MAAL,CAAY6B,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACvC,YAAI,KAAKgB,iBAAL,CAAuBhB,CAAvB,MAA8B,CAAlC,EAAqC;AACnC,eAAKb,KAAL,GAAa,KAAKjB,MAAL,CAAY8B,CAAZ,KAAkB,EAA/B;;AACA,eAAK,IAAIuB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,KAAL,CAAWM,MAAb,IAAuB,KAAKZ,KAAL,CAAWY,MAAX,GAAkB,CAAvD,EAA0DwB,CAAC,EAA3D,EAA+D;AAC7D,gBAAID,IAAI,GAAG,KAAK7B,KAAL,CAAW8B,CAAX,CAAX;;AACA,gBAAI,KAAKpC,KAAT,EAAgB;AACdmC,cAAAA,IAAI,CAAC5C,IAAL,GAAY,KAAKS,KAAL,CAAW,CAAX,EAAcT,IAA1B;AACD,aAFD,MAEO;AACL4C,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD;;AACDuB,YAAAA,IAAI,CAAC1C,SAAL,GAAiBV,MAAM,CAACoD,IAAI,CAAC5C,IAAN,CAAvB;AACA,iBAAKS,KAAL,CAAWqB,IAAX,CAAgBc,IAAhB;AACD;;AACD;AACD;AACF;;AAED,UAAI,KAAKnC,KAAL,CAAWY,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,aAAKC,CAAC,GAAC,CAAP,EAAUA,CAAC,GAAC,KAAK9B,MAAL,CAAY6B,MAAxB,EAAgCC,CAAC,EAAjC,EAAqC;AACnCb,UAAAA,KAAK,GAAG,KAAKjB,MAAL,CAAY8B,CAAZ,CAAR;;AACA,cAAIb,KAAK,IAAI,KAAKA,KAAL,CAAW,CAAX,EAAcP,SAAd,KAA4BO,KAAK,CAAC,CAAD,CAAL,CAASP,SAAlD,EAA6D;AAC3D;AACD;;AACD,cAAI,KAAKoC,iBAAL,CAAuBhB,CAAvB,KAA6B,CAAjC,EAAoC;AAClC,iBAAKb,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkBzC,KAAK,IAAI,EAA3B,CAAb;;AACA,iBAAK,IAAIoC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,KAAL,CAAWM,MAA3B,EAAmCwB,CAAC,EAApC,EAAwC;AACtC,kBAAID,IAAI,GAAG,KAAK7B,KAAL,CAAW8B,CAAX,CAAX;;AACA,kBAAID,IAAI,CAAC5C,IAAL,KAAc,CAAC,CAAnB,EAAsB;AACpB;AACD;;AACD,kBAAIS,KAAJ,EAAW;AACTmC,gBAAAA,IAAI,CAAC5C,IAAL,GAAYS,KAAK,CAAC,CAAD,CAAL,CAAST,IAArB;AACD,eAFD,MAEO,IAAI,KAAKS,KAAL,CAAW,CAAX,EAAcT,IAAd,KAAuBR,MAAM,CAAC6B,MAAP,GAAgB,CAAvC,IAA4C,KAAKV,IAAL,CAAU8B,UAAV,KAAyB,CAAzE,EAA4E;AACjFG,gBAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD,eAFM,MAEA;AACLuB,gBAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD;;AACDuB,cAAAA,IAAI,CAAC1C,SAAL,GAAiBV,MAAM,CAACoD,IAAI,CAAC5C,IAAN,CAAvB;AACA,mBAAKS,KAAL,CAAWqB,IAAX,CAAgBc,IAAhB;AACD;;AACD,iBAAKnC,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkB,KAAKH,WAAL,GAAmB0B,KAAnB,CAAyB,CAAzB,EAA4B,KAAK9D,IAAL,CAAUmE,WAAV,GAAsB,CAAlD,CAAlB,CAAb;AACA;AACD;AACF;AACF;;AAED,UAAI,KAAKrE,KAAL,CAAWY,MAAX,IAAqB,CAAzB,EAA4B;AAC1B,YAAI2D,IAAI,GAAG,KAAKvE,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,IAAwC,WAAxC,GAAsD,KAAKhE,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,CAAtD,GAA8F,KAAzG;AACA,aAAKH,KAAL,GAAa,KAAK5D,IAAL,GAAY,IAAZ,GAAmBsE,IAAhC;AACD;;AAED,aAAO,KAAKvE,KAAL,CAAWY,MAAX,IAAqB,CAA5B;AACD;;AA7D0B;;AAgE7B,QAAMiE,KAAN,SAAoB9E,IAApB,CAAyB;AACvBd,IAAAA,WAAW,CAACe,KAAD,EAAQE,IAAR,EAAcC,aAAd,EAA6B;AACtC,YAAMH,KAAN,EAAa,OAAb,EAAsBE,IAAtB,EAA4BC,aAA5B;AACD;;AAEDqB,IAAAA,KAAK,GAAG;AACN,WAAKjB,QAAL,GAAgB,CAAhB;AACA,WAAK8B,cAAL;;AAEA,WAAK,IAAIhD,IAAT,IAAiB,KAAKgB,KAAtB,EAA6B;AAC3B,YAAIL,KAAK,GAAG,KAAKiC,gBAAL,CAAsB5C,IAAtB,EAA4B,IAA5B,CAAZ;;AACA,YAAIW,KAAK,CAACY,MAAN,IAAgB,KAAKV,IAAL,CAAU0D,SAA9B,EAAyC;AACvC,eAAK5D,KAAL,GAAaA,KAAb;AACA;AACD;AACF;;AAED,UAAI,KAAKA,KAAL,CAAWY,MAAX,IAAqB,KAAKV,IAAL,CAAU0D,SAAnC,EAA8C;AAC5C,aAAKC,KAAL,GAAa,KAAK5D,IAAL,GAAY,IAAZ,GAAmB,KAAKD,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,CAAnB,GAA2D3E,IAA3D,GAAkE,OAA/E;AACA,aAAKkB,QAAL,GAAgB,KAAKP,KAAL,CAAWY,MAA3B;;AACA,YAAI,KAAKZ,KAAL,CAAWY,MAAX,GAAoB,KAAKV,IAAL,CAAUmE,WAAlC,EAA+C;AAC7C,eAAKrE,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkB,KAAKH,WAAL,GAAmB0B,KAAnB,CAAyB,CAAzB,EAA4B,KAAK9D,IAAL,CAAUmE,WAAV,GAAsB,KAAKrE,KAAL,CAAWY,MAA7D,CAAlB,CAAb;AACD;AACF;;AAED,aAAO,KAAKZ,KAAL,CAAWY,MAAX,IAAqB,KAAKV,IAAL,CAAU0D,SAAtC;AACD;;AA1BsB;;AA6BzB,QAAMG,QAAN,SAAuBhE,IAAvB,CAA4B;AAC1Bd,IAAAA,WAAW,CAACe,KAAD,EAAQE,IAAR,EAAcC,aAAd,EAA6B;AACtC,YAAMH,KAAN,EAAa,UAAb,EAAyBE,IAAzB,EAA+BC,aAA/B;AACD;;AAEDqB,IAAAA,KAAK,GAAG;AACN,UAAIR,IAAJ,EAAU8D,UAAV;AACA,WAAKzC,cAAL,GAFM,CAIN;AACA;;AACA,UAAI,KAAKnC,IAAL,CAAU6E,WAAV,KAA0B,CAA9B,EAAiC;AAC/B,aAAK/E,KAAL,GAAa,KAAKgF,QAAL,EAAb;;AACA,YAAI,KAAKhF,KAAL,CAAWY,MAAf,EAAuB;AACrB,cAAIqE,SAAS,GAAG,CAAhB;;AACA,eAAK,IAAIpE,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAKb,KAAL,CAAWY,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtCG,YAAAA,IAAI,GAAG,KAAKhB,KAAL,CAAWa,CAAX,CAAP;;AACA,gBAAIG,IAAI,CAAC7B,KAAL,KAAe,KAAKe,IAAL,CAAUT,SAA7B,EAAwC;AACtCwF,cAAAA,SAAS,IAAI,CAAb;AACD;;AACD,gBAAIjE,IAAI,CAACzB,IAAL,KAAc,CAAlB,EAAqB;AACnByB,cAAAA,IAAI,CAACzB,IAAL,GAAYR,MAAM,CAACS,OAAP,CAAe,GAAf,CAAZ;AACAwB,cAAAA,IAAI,CAACvB,SAAL,GAAiB,GAAjB;;AACA,kBAAIuB,IAAI,CAAC7B,KAAL,KAAe,GAAnB,EAAwB;AACtB6B,gBAAAA,IAAI,CAAC7B,KAAL,GAAa,GAAb;AACD;AACF;AACF;;AACD,eAAKa,KAAL,GAAa,KAAKA,KAAL,CAAWJ,IAAX,CAAgBZ,IAAI,CAACY,IAArB,CAAb;;AACA,iBAAOqF,SAAS,GAAC,KAAK3E,KAAL,CAAWM,MAArB,IAA+B,KAAKZ,KAAL,CAAWY,MAAX,GAAoB,KAAKV,IAAL,CAAUmE,WAApE,EAAiFY,SAAS,EAA1F,EAA8F;AAC5FjE,YAAAA,IAAI,GAAG,KAAKV,KAAL,CAAW2E,SAAX,CAAP;AACAjE,YAAAA,IAAI,CAACzB,IAAL,GAAYR,MAAM,CAACS,OAAP,CAAe,GAAf,CAAZ;AACAwB,YAAAA,IAAI,CAACvB,SAAL,GAAiB,GAAjB;AACA,iBAAKO,KAAL,CAAWqB,IAAX,CAAgBL,IAAhB;AACD;;AACD,eAAK6C,KAAL,GAAa,KAAK5D,IAAL,GAAY,SAAzB;AACA,eAAKM,QAAL,GAAgB,KAAKqD,SAArB;;AACA,cAAI,KAAK5D,KAAL,CAAW,CAAX,EAAcb,KAAd,KAAwB,GAA5B,EAAiC;AAC/B,iBAAKa,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkB,KAAKH,WAAL,GAAmB0B,KAAnB,CAAyB,CAAzB,EAA4B,KAAK9D,IAAL,CAAUmE,WAAV,GAAsB,KAAKrE,KAAL,CAAWY,MAAjC,GAAwC,CAApE,CAAlB,CAAb;AACD,WAFD,MAEO;AACL,iBAAKZ,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkB,KAAKH,WAAL,GAAmB0B,KAAnB,CAAyB,CAAzB,EAA4B,KAAK9D,IAAL,CAAUmE,WAAV,GAAsB,KAAKrE,KAAL,CAAWY,MAA7D,CAAlB,CAAb;AACD;;AACD,iBAAO,IAAP;AACD;;AACD,aAAKyB,cAAL;AACD;;AAED,WAAKrC,KAAL,GAAa,KAAKkF,OAAL,EAAb,CA1CM,CA4CN;;AACA,WAAK,IAAIrE,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAKP,KAAL,CAAWM,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtCG,QAAAA,IAAI,GAAG,KAAKV,KAAL,CAAWO,CAAX,CAAP;AACAiE,QAAAA,UAAU,GAAG,KAAKI,OAAL,CAAa,KAAKlF,KAAL,CAAWY,MAAxB,CAAb;;AACA,YAAI,KAAKZ,KAAL,CAAWY,MAAX,KAAsBkE,UAAU,CAAClE,MAArC,EAA6C;AAC3C;AACA,cAAI,KAAKZ,KAAL,CAAW,CAAX,EAAcT,IAAd,GAAsBR,MAAM,CAAC6B,MAAP,GAAgB,CAA1C,EAA8C;AAC5CI,YAAAA,IAAI,CAACzB,IAAL,GAAY,KAAKS,KAAL,CAAW,CAAX,EAAcT,IAAd,GAAqB,CAAjC;AACAyB,YAAAA,IAAI,CAACvB,SAAL,GAAiBV,MAAM,CAACiC,IAAI,CAACzB,IAAN,CAAvB;AACA,iBAAKS,KAAL,CAAWqB,IAAX,CAAgBL,IAAhB;AACD,WAJD,MAIO;AACLA,YAAAA,IAAI,CAACzB,IAAL,GAAY,KAAKS,KAAL,CAAW,KAAKA,KAAL,CAAWY,MAAX,GAAoB,CAA/B,EAAkCrB,IAAlC,GAAyC,CAArD;AACAyB,YAAAA,IAAI,CAACvB,SAAL,GAAiBV,MAAM,CAACiC,IAAI,CAACzB,IAAN,CAAvB;AACA,iBAAKS,KAAL,CAAWqB,IAAX,CAAgBL,IAAhB;AACD;AACF,SAXD,MAWO;AACL;AACA,eAAK,IAAIoB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAKpC,KAAL,CAAWY,MAA3B,EAAmCwB,CAAC,EAApC,EAAwC;AACtC,gBAAI,KAAKpC,KAAL,CAAWoC,CAAC,GAAC,CAAb,EAAgB7C,IAAhB,GAAuB,KAAKS,KAAL,CAAWoC,CAAX,EAAc7C,IAArC,GAA4C,CAAhD,EAAmD;AACjDyB,cAAAA,IAAI,CAACzB,IAAL,GAAY,KAAKS,KAAL,CAAWoC,CAAC,GAAC,CAAb,EAAgB7C,IAAhB,GAAuB,CAAnC;AACAyB,cAAAA,IAAI,CAACvB,SAAL,GAAiBV,MAAM,CAACiC,IAAI,CAACzB,IAAN,CAAvB;AACA,mBAAKS,KAAL,CAAWqB,IAAX,CAAgBL,IAAhB;AACA;AACD;AACF;AACF;;AACD,aAAKhB,KAAL,GAAa,KAAKA,KAAL,CAAWJ,IAAX,CAAgBZ,IAAI,CAACY,IAArB,CAAb;AACD;;AACD,UAAI,KAAKI,KAAL,CAAWY,MAAX,IAAqB,KAAKV,IAAL,CAAU0D,SAAnC,EAA8C;AAC5C,aAAKC,KAAL,GAAa,KAAK5D,IAAL,GAAY,IAAZ,GAAmB,KAAKD,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,CAAnB,GAA2D,OAAxE;AACA,aAAKhE,KAAL,GAAa,KAAKA,KAAL,CAAWgE,KAAX,CAAiB,CAAjB,EAAoB,KAAK9D,IAAL,CAAUmE,WAA9B,CAAb;AACA,aAAK9D,QAAL,GAAgB,KAAKP,KAAL,CAAWY,MAA3B;;AACA,YAAI,KAAKZ,KAAL,CAAWY,MAAX,GAAoB,KAAKV,IAAL,CAAUmE,WAAlC,EAA+C;AAC7C,cAAI,KAAKrE,KAAL,CAAW,KAAKO,QAAL,GAAc,CAAzB,EAA4BhB,IAA5B,KAAqC,CAAzC,EAA4C;AAC1C,iBAAKS,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkB,KAAKH,WAAL,GAAmB0B,KAAnB,CAAyB,CAAzB,EAA4B,KAAK9D,IAAL,CAAUmE,WAAV,GAAsB,KAAKrE,KAAL,CAAWY,MAAjC,GAAwC,CAApE,CAAlB,CAAb;AACD,WAFD,MAEO;AACL,iBAAKZ,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkB,KAAKH,WAAL,GAAmB0B,KAAnB,CAAyB,CAAzB,EAA4B,KAAK9D,IAAL,CAAUmE,WAAV,GAAsB,KAAKrE,KAAL,CAAWY,MAA7D,CAAlB,CAAb;AACD;AACF;AACF;;AAED,aAAO,KAAKZ,KAAL,CAAWY,MAAX,IAAqB,KAAKV,IAAL,CAAU0D,SAAtC;AACD;AAED;;;;;;AAIAsB,IAAAA,OAAO,CAACC,eAAD,EAAkB;AACvB,UAAIC,SAAJ,EAAeC,YAAf,EAA6BxE,CAA7B,EAAgCG,IAAhC,EAAsCsE,QAAtC,EAAgDC,SAAhD,EAA2DC,QAA3D,EAAqEC,QAArE,EAA+EC,IAA/E;AAEA,UAAIC,WAAW,GAAG5F,IAAI,CAACwD,UAAL,CAAgB,KAAKnD,QAArB,EAA+B,KAAKF,IAApC,CAAlB;AACAkF,MAAAA,SAAS,GAAGO,WAAW,CAAC,CAAD,CAAvB;AACAN,MAAAA,YAAY,GAAGM,WAAW,CAAC,CAAD,CAA1B;;AAEA,WAAK9E,CAAC,GAAC,CAAP,EAAUA,CAAC,GAACwE,YAAY,CAACzE,MAAzB,EAAiCC,CAAC,EAAlC,EAAsC;AACpCG,QAAAA,IAAI,GAAGqE,YAAY,CAACxE,CAAD,CAAnB;;AACA,YAAIG,IAAI,CAACvB,SAAL,KAAmB,GAAvB,EAA4B;AAC1B4F,UAAAA,YAAY,CAAChE,IAAb,CAAkB,IAAIrC,IAAJ,CAAS,MAAMgC,IAAI,CAAC3B,IAApB,CAAlB;AACD;AACF;;AACDgG,MAAAA,YAAY,GAAGA,YAAY,CAACzF,IAAb,CAAkBZ,IAAI,CAACY,IAAvB,CAAf;;AAEA,UAAIuF,eAAJ,EAAqB;AACnBtE,QAAAA,CAAC,GAAGwE,YAAY,CAAC,CAAD,CAAZ,CAAgB9F,IAAhB,GAAuB,CAA3B;AACD,OAFD,MAEO;AACL4F,QAAAA,eAAe,GAAG,KAAKjF,IAAL,CAAU0D,SAA5B;AACA/C,QAAAA,CAAC,GAAG9B,MAAM,CAAC6B,MAAX;AACD;;AAED0E,MAAAA,QAAQ,GAAG,EAAX;;AACA,aAAOzE,CAAC,GAAC,CAAT,EAAYA,CAAC,EAAb,EAAiB;AACf0E,QAAAA,SAAS,GAAG,EAAZ;AACAC,QAAAA,QAAQ,GAAG,CAAX;;AACA,aAAK,IAAIpD,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACiD,YAAY,CAACzE,MAA7B,EAAqCwB,CAAC,EAAtC,EAA0C;AACxCpB,UAAAA,IAAI,GAAGqE,YAAY,CAACjD,CAAD,CAAnB;;AACA,cAAIpB,IAAI,CAACzB,IAAL,GAAYsB,CAAhB,EAAmB;AACjB;AACD;;AACD4E,UAAAA,QAAQ,GAAGF,SAAS,CAACA,SAAS,CAAC3E,MAAV,GAAmB,CAApB,CAApB;AACA8E,UAAAA,IAAI,GAAID,QAAD,GAAaA,QAAQ,CAAClG,IAAT,GAAgByB,IAAI,CAACzB,IAAlC,GAAyCsB,CAAC,GAAGG,IAAI,CAACzB,IAAzD;;AAEA,cAAImG,IAAI,KAAK,IAAb,EAAmB;AACjBH,YAAAA,SAAS,CAAClE,IAAV,CAAeL,IAAf;AACD,WAFD,MAEO,IAAImE,eAAe,GAAIK,QAAQ,GAAGE,IAAX,GAAkBH,SAAS,CAAC3E,MAAnD,EAA4D;AACjE;AACD,WAFM,MAEA,IAAI8E,IAAI,GAAG,CAAX,EAAc;AACnBH,YAAAA,SAAS,CAAClE,IAAV,CAAeL,IAAf;AACAwE,YAAAA,QAAQ,IAAKE,IAAI,GAAG,CAApB;AACD;AACF;;AACD,YAAIH,SAAS,CAAC3E,MAAV,GAAmB0E,QAAQ,CAAC1E,MAAhC,EAAwC;AACtC0E,UAAAA,QAAQ,GAAGC,SAAS,CAACvB,KAAV,EAAX;AACD;;AACD,YAAI,KAAK9D,IAAL,CAAU0D,SAAV,GAAsB0B,QAAQ,CAAC1E,MAA/B,IAAyCwE,SAAS,CAACxE,MAAvD,EAA+D;AAC7D;AACD;AACF;;AAED,aAAO0E,QAAP;AACD;;AAEDN,IAAAA,QAAQ,GAAG;AACT,UAAII,SAAJ,EAAeC,YAAf,EAA6BxE,CAA7B,EAAgCG,IAAhC,EAAsC4E,UAAtC,EAAkDX,SAAlD,EAA6DY,SAA7D;AAEA,UAAIF,WAAW,GAAG5F,IAAI,CAACwD,UAAL,CAAgB,KAAKnD,QAArB,EAA+B,KAAKF,IAApC,CAAlB;AACAkF,MAAAA,SAAS,GAAGO,WAAW,CAAC,CAAD,CAAvB;AACAN,MAAAA,YAAY,GAAGM,WAAW,CAAC,CAAD,CAA1B;;AAEA,WAAK9E,CAAC,GAAC,CAAP,EAAUA,CAAC,GAACwE,YAAY,CAACzE,MAAzB,EAAiCC,CAAC,EAAlC,EAAsC;AACpCG,QAAAA,IAAI,GAAGqE,YAAY,CAACxE,CAAD,CAAnB;;AACA,YAAIG,IAAI,CAACvB,SAAL,KAAmB,GAAvB,EAA4B;AAC1B4F,UAAAA,YAAY,CAAChE,IAAb,CAAkB,IAAIrC,IAAJ,CAAS,MAAMgC,IAAI,CAAC3B,IAApB,CAAlB;AACD;AACF;;AACDgG,MAAAA,YAAY,GAAGA,YAAY,CAACzF,IAAb,CAAkBZ,IAAI,CAACY,IAAvB,CAAf;AAEAgG,MAAAA,UAAU,GAAG,EAAb;AACAX,MAAAA,SAAS,GAAG,CAAZ;;AACA,WAAKpE,CAAC,GAAG,KAAKX,IAAL,CAAU0D,SAAV,GAAoB,CAA7B,EAAgC/C,CAAC,IAAE,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACzCgF,QAAAA,SAAS,GAAG,KAAZ;;AACA,aAAK,IAAIzD,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACiD,YAAY,CAACzE,MAA7B,EAAqCwB,CAAC,EAAtC,EAA0C;AACxCpB,UAAAA,IAAI,GAAGqE,YAAY,CAACjD,CAAD,CAAnB;;AACA,cAAIpB,IAAI,CAACzB,IAAL,GAAYsB,CAAhB,EAAmB;AACjB;AACD;;AACD,cAAIG,IAAI,CAACzB,IAAL,GAAYsB,CAAhB,EAAmB;AACjB;AACD;;AACD+E,UAAAA,UAAU,CAACvE,IAAX,CAAgBL,IAAhB;AACA6E,UAAAA,SAAS,GAAG,IAAZ;AACA;AACD;;AACD,YAAI,CAACA,SAAL,EAAgB;AACd,cAAIZ,SAAS,GAAGG,SAAS,CAACxE,MAA1B,EAAkC;AAChCwE,YAAAA,SAAS,CAACH,SAAD,CAAT,CAAqB1F,IAArB,GAA4BsB,CAA5B;AACAuE,YAAAA,SAAS,CAACH,SAAD,CAAT,CAAqBxF,SAArB,GAAiCV,MAAM,CAAC8B,CAAD,CAAvC;AACA+E,YAAAA,UAAU,CAACvE,IAAX,CAAgB+D,SAAS,CAACH,SAAD,CAAzB;AACAA,YAAAA,SAAS,IAAI,CAAb;AACD,WALD,MAKO;AACL,mBAAO,EAAP;AACD;AACF;AACF;;AAED,aAAOW,UAAP;AACD;;AAnMyB;;AAsM5B,QAAME,eAAN,SAA8B/F,IAA9B,CAAmC;AACjCd,IAAAA,WAAW,CAACe,KAAD,EAAQE,IAAR,EAAcC,aAAd,EAA6B;AACtC,YAAMH,KAAN,EAAa,qBAAb,EAAoCE,IAApC,EAA0CC,aAA1C;AACD;;AAEDqB,IAAAA,KAAK,GAAG;AACN,WAAKa,cAAL;;AACA,WAAK,IAAIxB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,MAAL,CAAY6B,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACvC,YAAIb,KAAK,GAAG,KAAKjB,MAAL,CAAY8B,CAAZ,CAAZ;;AACA,YAAI,KAAKb,KAAL,CAAWY,MAAX,GAAoB,CAApB,IAAyB,KAAKiB,iBAAL,CAAuBhB,CAAvB,MAA8B,CAA3D,EAA8D;AAC5D,eAAKb,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkBzC,KAAK,IAAI,EAA3B,CAAb;;AACA,eAAK,IAAIoC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,KAAL,CAAWM,MAA3B,EAAmCwB,CAAC,EAApC,EAAwC;AACtC,gBAAID,IAAI,GAAG,KAAK7B,KAAL,CAAW8B,CAAX,CAAX;;AACA,gBAAID,IAAI,CAAC5C,IAAL,KAAc,CAAC,CAAnB,EAAsB;AACpB;AACD;;AACD,gBAAIS,KAAJ,EAAW;AACTmC,cAAAA,IAAI,CAAC5C,IAAL,GAAYS,KAAK,CAAC,CAAD,CAAL,CAAST,IAArB;AACD,aAFD,MAEO,IAAI,KAAKS,KAAL,CAAW,CAAX,EAAcT,IAAd,KAAuBR,MAAM,CAAC6B,MAAP,GAAgB,CAAvC,IAA4C,KAAKV,IAAL,CAAU8B,UAAV,KAAyB,CAAzE,EAA4E;AACjFG,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD,aAFM,MAEA;AACLuB,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD;;AACDuB,YAAAA,IAAI,CAAC1C,SAAL,GAAiBV,MAAM,CAACoD,IAAI,CAAC5C,IAAN,CAAvB;AACA,iBAAKS,KAAL,CAAWqB,IAAX,CAAgBc,IAAhB;AACD;;AACD,eAAKnC,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkB,KAAKH,WAAL,GAAmB0B,KAAnB,CAAyB,CAAzB,EAA4B,KAAK9D,IAAL,CAAUmE,WAAV,GAAsB,CAAlD,CAAlB,CAAb;AACA;AACD,SAnBD,MAmBO,IAAI,KAAKxC,iBAAL,CAAuBhB,CAAvB,MAA8B,CAAlC,EAAqC;AAC1C,eAAKb,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkBzC,KAAlB,CAAb;;AACA,eAAK,IAAIoC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,KAAL,CAAWM,MAA3B,EAAmCwB,CAAC,EAApC,EAAwC;AACtC,gBAAID,IAAI,GAAG,KAAK7B,KAAL,CAAW8B,CAAX,CAAX;;AACA,gBAAID,IAAI,CAAC5C,IAAL,KAAc,CAAC,CAAnB,EAAsB;AACpB;AACD;;AACD,gBAAIS,KAAJ,EAAW;AACTmC,cAAAA,IAAI,CAAC5C,IAAL,GAAYS,KAAK,CAAC,CAAD,CAAL,CAAST,IAArB;AACD,aAFD,MAEO,IAAI,KAAKS,KAAL,CAAW,CAAX,EAAcT,IAAd,KAAuBR,MAAM,CAAC6B,MAAP,GAAgB,CAAvC,IAA4C,KAAKV,IAAL,CAAU8B,UAAV,KAAyB,CAAzE,EAA4E;AACjFG,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD,aAFM,MAEA;AACLuB,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD;;AACDuB,YAAAA,IAAI,CAAC1C,SAAL,GAAiBV,MAAM,CAACoD,IAAI,CAAC5C,IAAN,CAAvB;AACA,iBAAKS,KAAL,CAAWqB,IAAX,CAAgBc,IAAhB;AACD;AACF;AACF;;AAED,UAAI,KAAKnC,KAAL,CAAWY,MAAX,IAAqB,CAAzB,EAA4B;AAC1B,YAAI2D,IAAI,GAAG,KAAKvE,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,IAAwC,QAAxC,GAAmD,KAAKhE,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,CAAnD,GAA2F,KAAtG;AACA,aAAKH,KAAL,GAAa,KAAK5D,IAAL,GAAY,IAAZ,GAAmBsE,IAAhC;AACD;;AAED,aAAO,KAAKvE,KAAL,CAAWY,MAAX,IAAqB,CAA5B;AACD;;AAtDgC;;AAyDnC,QAAMmF,YAAN,SAA2BhG,IAA3B,CAAgC;AAC9Bd,IAAAA,WAAW,CAACe,KAAD,EAAQE,IAAR,EAAcC,aAAd,EAA6B;AACtC,YAAMH,KAAN,EAAa,iBAAb,EAAgCE,IAAhC,EAAsCC,aAAtC;AACD;;AAEDqB,IAAAA,KAAK,GAAG;AACN,WAAKa,cAAL;;AAEA,WAAK,IAAIxB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,MAAL,CAAY6B,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACvC,YAAI,KAAKgB,iBAAL,CAAuBhB,CAAvB,MAA8B,CAAlC,EAAqC;AACnC,eAAKb,KAAL,GAAa,KAAKjB,MAAL,CAAY8B,CAAZ,KAAkB,EAA/B;;AACA,eAAK,IAAIuB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,KAAL,CAAWM,MAAb,IAAuB,KAAKZ,KAAL,CAAWY,MAAX,GAAkB,CAAvD,EAA0DwB,CAAC,EAA3D,EAA+D;AAC7D,gBAAID,IAAI,GAAG,KAAK7B,KAAL,CAAW8B,CAAX,CAAX;;AACA,gBAAI,KAAKpC,KAAT,EAAgB;AACdmC,cAAAA,IAAI,CAAC5C,IAAL,GAAY,KAAKS,KAAL,CAAW,CAAX,EAAcT,IAA1B;AACD,aAFD,MAEO;AACL4C,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD;;AACDuB,YAAAA,IAAI,CAAC1C,SAAL,GAAiBV,MAAM,CAACoD,IAAI,CAAC5C,IAAN,CAAvB;AACA,iBAAKS,KAAL,CAAWqB,IAAX,CAAgBc,IAAhB;AACD;;AACD,eAAKnC,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkB,KAAKH,WAAL,GAAmB0B,KAAnB,CAAyB,CAAzB,EAA4B,KAAK9D,IAAL,CAAUmE,WAAV,GAAsB,CAAlD,CAAlB,CAAb;AACA;AACD;AACF;;AAED,UAAI,KAAKrE,KAAL,CAAWY,MAAX,IAAqB,CAAzB,EAA4B;AAC1B,YAAI,KAAKV,IAAL,CAAUuE,SAAd,EAAyB;AACvB,eAAKzE,KAAL,CAAWY,MAAX,GAAoB,CAApB;AACD;;AAED,aAAKiD,KAAL,GAAa,KAAK5D,IAAL,GAAY,IAAZ,GAAmB,KAAKD,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,CAAnB,GAA2D,KAAxE;AACD;;AAED,aAAO,KAAKhE,KAAL,CAAWY,MAAX,IAAqB,CAA5B;AACD;;AAnC6B;;AAsChC,QAAMoF,SAAN,SAAwBjG,IAAxB,CAA6B;AAC3Bd,IAAAA,WAAW,CAACe,KAAD,EAAQE,IAAR,EAAcC,aAAd,EAA6B;AACtC,YAAMH,KAAN,EAAa,YAAb,EAA2BE,IAA3B,EAAiCC,aAAjC;AACD;;AAEDqB,IAAAA,KAAK,GAAG;AACN,WAAKa,cAAL;;AAEA,WAAK,IAAIxB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,MAAL,CAAY6B,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACvC,YAAIb,KAAK,GAAG,KAAKjB,MAAL,CAAY8B,CAAZ,CAAZ;;AACA,YAAI,KAAKb,KAAL,CAAWY,MAAX,GAAoB,CAApB,IAAyB,KAAKiB,iBAAL,CAAuBhB,CAAvB,MAA8B,CAA3D,EAA8D;AAC5D,eAAKb,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkBzC,KAAK,IAAI,EAA3B,CAAb;;AACA,eAAK,IAAIoC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,KAAL,CAAWM,MAA3B,EAAmCwB,CAAC,EAApC,EAAwC;AACtC,gBAAID,IAAI,GAAG,KAAK7B,KAAL,CAAW8B,CAAX,CAAX;;AACA,gBAAID,IAAI,CAAC5C,IAAL,KAAc,CAAC,CAAnB,EAAsB;AACpB;AACD;;AACD,gBAAIS,KAAJ,EAAW;AACTmC,cAAAA,IAAI,CAAC5C,IAAL,GAAYS,KAAK,CAAC,CAAD,CAAL,CAAST,IAArB;AACD,aAFD,MAEO,IAAI,KAAKS,KAAL,CAAW,CAAX,EAAcT,IAAd,KAAuBR,MAAM,CAAC6B,MAAP,GAAgB,CAAvC,IAA4C,KAAKV,IAAL,CAAU8B,UAAV,KAAyB,CAAzE,EAA4E;AACjFG,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD,aAFM,MAEA;AACLuB,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD;;AACDuB,YAAAA,IAAI,CAAC1C,SAAL,GAAiBV,MAAM,CAACoD,IAAI,CAAC5C,IAAN,CAAvB;AACA,iBAAKS,KAAL,CAAWqB,IAAX,CAAgBc,IAAhB;AACD;;AACD,eAAKnC,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkB,KAAKH,WAAL,GAAmB0B,KAAnB,CAAyB,CAAzB,EAA4B,KAAK9D,IAAL,CAAUmE,WAAV,GAAsB,CAAlD,CAAlB,CAAb;AACA;AACD,SAnBD,MAmBO,IAAI,KAAKrE,KAAL,CAAWY,MAAX,GAAoB,CAApB,IAAyB,KAAKiB,iBAAL,CAAuBhB,CAAvB,MAA8B,CAA3D,EAA8D;AACnE,eAAKb,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkBzC,KAAK,IAAI,EAA3B,CAAb;;AACA,eAAK,IAAIoC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,KAAL,CAAWM,MAA3B,EAAmCwB,CAAC,EAApC,EAAwC;AACtC,gBAAID,IAAI,GAAG,KAAK7B,KAAL,CAAW8B,CAAX,CAAX;;AACA,gBAAID,IAAI,CAAC5C,IAAL,KAAc,CAAC,CAAnB,EAAsB;AACpB;AACD;;AACD,gBAAIS,KAAJ,EAAW;AACTmC,cAAAA,IAAI,CAAC5C,IAAL,GAAYS,KAAK,CAAC,CAAD,CAAL,CAAST,IAArB;AACD,aAFD,MAEO,IAAI,KAAKS,KAAL,CAAW,CAAX,EAAcT,IAAd,KAAuBR,MAAM,CAAC6B,MAAP,GAAgB,CAAvC,IAA4C,KAAKV,IAAL,CAAU8B,UAAV,KAAyB,CAAzE,EAA4E;AACjFG,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD,aAFM,MAEA;AACLuB,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD;;AACDuB,YAAAA,IAAI,CAAC1C,SAAL,GAAiBV,MAAM,CAACoD,IAAI,CAAC5C,IAAN,CAAvB;AACA,iBAAKS,KAAL,CAAWqB,IAAX,CAAgBc,IAAhB;AACD;AACF,SAjBM,MAiBA,IAAI,KAAKN,iBAAL,CAAuBhB,CAAvB,MAA8B,CAAlC,EAAqC;AAC1C,eAAKb,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkBzC,KAAlB,CAAb;;AACA,eAAK,IAAIoC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,KAAL,CAAWM,MAA3B,EAAmCwB,CAAC,EAApC,EAAwC;AACtC,gBAAID,IAAI,GAAG,KAAK7B,KAAL,CAAW8B,CAAX,CAAX;;AACA,gBAAID,IAAI,CAAC5C,IAAL,KAAc,CAAC,CAAnB,EAAsB;AACpB;AACD;;AACD,gBAAIS,KAAJ,EAAW;AACTmC,cAAAA,IAAI,CAAC5C,IAAL,GAAYS,KAAK,CAAC,CAAD,CAAL,CAAST,IAArB;AACD,aAFD,MAEO,IAAI,KAAKS,KAAL,CAAW,CAAX,EAAcT,IAAd,KAAuBR,MAAM,CAAC6B,MAAP,GAAgB,CAAvC,IAA4C,KAAKV,IAAL,CAAU8B,UAAV,KAAyB,CAAzE,EAA4E;AACjFG,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD,aAFM,MAEA;AACLuB,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD;;AACDuB,YAAAA,IAAI,CAAC1C,SAAL,GAAiBV,MAAM,CAACoD,IAAI,CAAC5C,IAAN,CAAvB;AACA,iBAAKS,KAAL,CAAWqB,IAAX,CAAgBc,IAAhB;AACD;AACF;AACF;;AAED,UAAI,KAAKnC,KAAL,CAAWY,MAAX,IAAqB,CAAzB,EAA4B;AAC1B,YAAI2D,IAAI,GAAG,KAAKvE,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,IAAwC,QAAxC,GAAmD,KAAKhE,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,CAAnD,GAA2F,QAA3F,GAAsG,KAAKhE,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,CAAtG,GAA8I,KAAzJ;AACA,aAAKH,KAAL,GAAa,KAAK5D,IAAL,GAAY,IAAZ,GAAmBsE,IAAhC;AACD;;AAED,aAAO,KAAKvE,KAAL,CAAWY,MAAX,IAAqB,CAA5B;AACD;;AAxE0B;;AA2E7B,QAAMqF,OAAN,SAAsBlG,IAAtB,CAA2B;AACzBd,IAAAA,WAAW,CAACe,KAAD,EAAQE,IAAR,EAAcC,aAAd,EAA6B;AACtC,YAAMH,KAAN,EAAa,UAAb,EAAyBE,IAAzB,EAA+BC,aAA/B;AACD;;AAEDqB,IAAAA,KAAK,GAAG;AACN,WAAKa,cAAL;;AAEA,WAAK,IAAIxB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,MAAL,CAAY6B,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACvC,YAAIb,KAAK,GAAG,KAAKjB,MAAL,CAAY8B,CAAZ,CAAZ;;AACA,YAAI,KAAKb,KAAL,CAAWY,MAAX,GAAoB,CAApB,IAAyB,KAAKiB,iBAAL,CAAuBhB,CAAvB,MAA8B,CAA3D,EAA8D;AAC5D,eAAKb,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkBzC,KAAK,IAAI,EAA3B,CAAb;;AACA,eAAK,IAAIoC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,KAAL,CAAWM,MAA3B,EAAmCwB,CAAC,EAApC,EAAwC;AACtC,gBAAID,IAAI,GAAG,KAAK7B,KAAL,CAAW8B,CAAX,CAAX;;AACA,gBAAID,IAAI,CAAC5C,IAAL,KAAc,CAAC,CAAnB,EAAsB;AACpB;AACD;;AACD,gBAAIS,KAAJ,EAAW;AACTmC,cAAAA,IAAI,CAAC5C,IAAL,GAAYS,KAAK,CAAC,CAAD,CAAL,CAAST,IAArB;AACD,aAFD,MAEO,IAAI,KAAKS,KAAL,CAAW,CAAX,EAAcT,IAAd,KAAuBR,MAAM,CAAC6B,MAAP,GAAgB,CAAvC,IAA4C,KAAKV,IAAL,CAAU8B,UAAV,KAAyB,CAAzE,EAA4E;AACjFG,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD,aAFM,MAEA;AACLuB,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD;;AACDuB,YAAAA,IAAI,CAAC1C,SAAL,GAAiBV,MAAM,CAACoD,IAAI,CAAC5C,IAAN,CAAvB;AACA,iBAAKS,KAAL,CAAWqB,IAAX,CAAgBc,IAAhB;AACD;;AACD,eAAKnC,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkB,KAAKH,WAAL,GAAmB0B,KAAnB,CAAyB,CAAzB,EAA4B,KAAK9D,IAAL,CAAUmE,WAAV,GAAsB,CAAlD,CAAlB,CAAb;AACA;AACD,SAnBD,MAmBO,IAAI,KAAKxC,iBAAL,CAAuBhB,CAAvB,MAA8B,CAAlC,EAAqC;AAC1C,eAAKb,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkBzC,KAAlB,CAAb;;AACA,eAAK,IAAIoC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,KAAL,CAAWM,MAA3B,EAAmCwB,CAAC,EAApC,EAAwC;AACtC,gBAAID,IAAI,GAAG,KAAK7B,KAAL,CAAW8B,CAAX,CAAX;;AACA,gBAAID,IAAI,CAAC5C,IAAL,KAAc,CAAC,CAAnB,EAAsB;AACpB;AACD;;AACD,gBAAIS,KAAJ,EAAW;AACTmC,cAAAA,IAAI,CAAC5C,IAAL,GAAYS,KAAK,CAAC,CAAD,CAAL,CAAST,IAArB;AACD,aAFD,MAEO,IAAI,KAAKS,KAAL,CAAW,CAAX,EAAcT,IAAd,KAAuBR,MAAM,CAAC6B,MAAP,GAAgB,CAAvC,IAA4C,KAAKV,IAAL,CAAU8B,UAAV,KAAyB,CAAzE,EAA4E;AACjFG,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD,aAFM,MAEA;AACLuB,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD;;AACDuB,YAAAA,IAAI,CAAC1C,SAAL,GAAiBV,MAAM,CAACoD,IAAI,CAAC5C,IAAN,CAAvB;AACA,iBAAKS,KAAL,CAAWqB,IAAX,CAAgBc,IAAhB;AACD;AACF;AACF;;AAED,UAAI,KAAKnC,KAAL,CAAWY,MAAX,IAAqB,CAAzB,EAA4B;AAC1B,YAAI,KAAKV,IAAL,CAAUuE,SAAd,EAAyB;AACvB,eAAKzE,KAAL,CAAWY,MAAX,GAAoB,CAApB;AACD;;AAED,YAAI2D,IAAI,GAAG,KAAKvE,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,IAAwC,QAAxC,GAAmD,KAAKhE,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,CAAnD,GAA2F,KAAtG;AACA,aAAKH,KAAL,GAAa,KAAK5D,IAAL,GAAY,IAAZ,GAAmBsE,IAAhC;AACD;;AAED,aAAO,KAAKvE,KAAL,CAAWY,MAAX,IAAqB,CAA5B;AACD;;AA3DwB;;AA8D3B,QAAMsF,OAAN,SAAsBnG,IAAtB,CAA2B;AACzBd,IAAAA,WAAW,CAACe,KAAD,EAAQE,IAAR,EAAcC,aAAd,EAA6B;AACtC,YAAMH,KAAN,EAAa,MAAb,EAAqBE,IAArB,EAA2BC,aAA3B;AACD;;AAEDqB,IAAAA,KAAK,GAAG;AACN,WAAKa,cAAL;;AAEA,WAAK,IAAIxB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,MAAL,CAAY6B,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACvC,YAAI,KAAKgB,iBAAL,CAAuBhB,CAAvB,MAA8B,CAAlC,EAAqC;AACnC,eAAKb,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkB,KAAK1D,MAAL,CAAY8B,CAAZ,KAAkB,EAApC,CAAb;;AACA,eAAK,IAAIuB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAK9B,KAAL,CAAWM,MAAb,IAAuB,KAAKZ,KAAL,CAAWY,MAAX,GAAkB,CAAvD,EAA0DwB,CAAC,EAA3D,EAA+D;AAC7D,gBAAID,IAAI,GAAG,KAAK7B,KAAL,CAAW8B,CAAX,CAAX;;AACA,gBAAI,KAAKpC,KAAT,EAAgB;AACdmC,cAAAA,IAAI,CAAC5C,IAAL,GAAY,KAAKS,KAAL,CAAW,CAAX,EAAcT,IAA1B;AACD,aAFD,MAEO;AACL4C,cAAAA,IAAI,CAAC5C,IAAL,GAAYR,MAAM,CAAC6B,MAAP,GAAgB,CAA5B;AACD;;AACDuB,YAAAA,IAAI,CAAC1C,SAAL,GAAiBV,MAAM,CAACoD,IAAI,CAAC5C,IAAN,CAAvB;AACA,iBAAKS,KAAL,CAAWqB,IAAX,CAAgBc,IAAhB;AACD;;AACD,eAAKnC,KAAL,GAAa,KAAKA,KAAL,CAAWyC,MAAX,CAAkB,KAAKH,WAAL,GAAmB0B,KAAnB,CAAyB,CAAzB,EAA4B,KAAK9D,IAAL,CAAUmE,WAAV,GAAsB,CAAlD,CAAlB,CAAb;AACA;AACD;AACF;;AAED,UAAI,KAAKrE,KAAL,CAAWY,MAAX,IAAqB,CAAzB,EAA4B;AAC1B,YAAI,KAAKV,IAAL,CAAUuE,SAAd,EAAyB;AACvB,eAAKzE,KAAL,CAAWY,MAAX,GAAoB,CAApB;AACD;;AAED,aAAKiD,KAAL,GAAa,KAAK5D,IAAL,GAAY,IAAZ,GAAmB,KAAKD,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,CAAnB,GAA2D,KAAxE;AACD;;AAED,aAAO,KAAKhE,KAAL,CAAWY,MAAX,IAAqB,CAA5B;AACD;;AAnCwB;;AAsC3B,QAAMuF,QAAN,SAAuBpG,IAAvB,CAA4B;AAC1Bd,IAAAA,WAAW,CAACe,KAAD,EAAQE,IAAR,EAAcC,aAAd,EAA6B;AACtC,YAAMH,KAAN,EAAa,WAAb,EAA0BE,IAA1B,EAAgCC,aAAhC;AACD;;AAEDqB,IAAAA,KAAK,GAAG;AACN,WAAKxB,KAAL,GAAa,KAAKI,QAAL,CAAc4D,KAAd,CAAoB,CAApB,EAAuB,KAAK9D,IAAL,CAAUmE,WAAjC,CAAb;;AAEA,WAAK,IAAIxD,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAKb,KAAL,CAAWY,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtC,YAAIG,IAAI,GAAG,KAAKhB,KAAL,CAAWa,CAAX,CAAX;;AACA,YAAI,KAAKb,KAAL,CAAWa,CAAX,EAAc1B,KAAd,KAAwB,KAAKe,IAAL,CAAUT,SAAtC,EAAiD;AAC/C,eAAKO,KAAL,CAAWa,CAAX,EAAcpB,SAAd,GAA0B,GAA1B;AACA,eAAKO,KAAL,CAAWa,CAAX,EAActB,IAAd,GAAqBR,MAAM,CAACS,OAAP,CAAe,GAAf,CAArB;AACD;AACF;;AAED,UAAI,KAAKU,IAAL,CAAUuE,SAAd,EAAyB;AACvB,aAAKzE,KAAL,CAAWY,MAAX,GAAoB,CAApB;AACD;;AAED,WAAKZ,KAAL,GAAa,KAAKA,KAAL,CAAWJ,IAAX,CAAgBZ,IAAI,CAACY,IAArB,CAAb;AACA,WAAKiE,KAAL,GAAa,KAAK7D,KAAL,CAAW,CAAX,EAAcN,QAAd,GAAyBsE,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,IAAwC,OAArD;AAEA,aAAO,IAAP;AACD;;AAxByB;AA2B5B;;;;;;;;AAMA,QAAMoC,iBAAN,CAAwB;AACtB;;;;AAIAnH,IAAAA,WAAW,CAAC2C,IAAD,EAAO;AAChB,WAAKyE,QAAL,GAAgB,IAAhB;AACA,WAAKC,MAAL,GAAc,IAAd;AACA,WAAKC,MAAL,GAAc,IAAd;AACA,WAAKrG,IAAL,GAAY,IAAZ;AACA,WAAKsG,MAAL,GAAc,IAAIlD,IAAJ,CAAS,eAAT,CAAd;AACA,WAAKmD,MAAL,GAAc,IAAInD,IAAJ,CAAS,eAAT,CAAd;;AAEA,UAAIoD,KAAK,CAACC,OAAN,CAAc/E,IAAd,CAAJ,EAAyB;AACvB,aAAKyE,QAAL,GAAgBtG,IAAI,CAACyB,KAAL,CAAWI,IAAX,EAAiB,IAAI0B,IAAJ,CAAS,iBAAT,CAAjB,CAAhB;AACD,OAFD,MAEO;AACL,aAAK+C,QAAL,GAAgBzE,IAAhB;AACD;;AAED,WAAK1B,IAAL,GAAY,KAAKmG,QAAL,CAAcnG,IAA1B;AACD;AAED;;;;;AAGA0G,IAAAA,aAAa,GAAG;AACd,UAAIC,OAAJ,EAAaC,OAAb;AACA,UAAIvH,IAAI,GAAG,KAAKW,IAAL,CAAUS,UAAV,CAAqBC,MAArB,GAA8B,KAAKyF,QAAL,CAAc9G,IAAvD;AACA,UAAIwH,SAAS,GAAG,KAAK7G,IAAL,CAAUS,UAAV,CAAqBpB,IAArB,CAAhB;;AAEA,UAAIwH,SAAS,KAAK3C,WAAlB,EAA+B;AAC7B,YAAI,KAAKiC,QAAL,CAAcrG,KAAd,CAAoB,CAApB,EAAuBb,KAAvB,KAAiC,GAAjC,IAAwC,KAAKkH,QAAL,CAAcrG,KAAd,CAAoB,CAApB,EAAuBb,KAAvB,KAAiC,GAA7E,EAAkF;AAChF2H,UAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,UAAAA,OAAO,GAAG,KAAKR,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACD,SAHD,MAGO;AACL8C,UAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,UAAAA,OAAO,GAAG,KAAKR,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACD;AACF,OARD,MAQO,IAAI+C,SAAS,KAAKzC,mBAAlB,EAAuC;AAC5C,YAAI,KAAK+B,QAAL,CAAcrG,KAAd,CAAoB,CAApB,EAAuBP,SAAvB,KAAqC,GAArC,IAA4C,KAAK4G,QAAL,CAAcrG,KAAd,CAAoB,CAApB,EAAuBb,KAAvB,KAAiC,GAAjF,EAAsF;AACpF0H,UAAAA,OAAO,GAAG,KAAKR,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA8C,UAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,UAAAA,OAAO,GAAGA,OAAO,CAACpE,MAAR,CAAe,KAAK4D,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAf,CAAV;AACD,SAJD,MAIO;AACL6C,UAAAA,OAAO,GAAG,KAAKR,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA8C,UAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,UAAAA,OAAO,CAACxF,IAAR,CAAa,KAAKgF,QAAL,CAAcrG,KAAd,CAAoB,CAApB,CAAb;AACD;AACF,OAVM,MAUA,IAAI+G,SAAS,KAAKtD,aAAd,IAA+BsD,SAAS,KAAKlC,KAA7C,IAAsDkC,SAAS,KAAKhD,QAAxE,EAAkF;AACvF,YAAIiD,QAAJ;AACA,YAAIC,OAAO,GAAG,IAAI3D,IAAJ,CAAS,gBAAT,CAAd;AACA,YAAI4D,OAAO,GAAGnH,IAAI,CAACyB,KAAL,CAAW,KAAK6E,QAAL,CAAcrG,KAAzB,EAAgCiH,OAAhC,CAAd;AACA,YAAIE,OAAO,GAAGF,OAAO,CAACtG,UAAR,CAAmBC,MAAnB,GAA4BsG,OAAO,CAAC3H,IAAlD;;AACA,YAAI0H,OAAO,CAACtG,UAAR,CAAmBwG,OAAnB,MAAgC3C,WAApC,EAAiD;AAC/CwC,UAAAA,QAAQ,GAAG,KAAKI,SAAL,CAAeF,OAAO,CAAClH,KAAvB,CAAX;AACA6G,UAAAA,OAAO,GAAGG,QAAQ,CAAC,CAAD,CAAlB;AACAF,UAAAA,OAAO,GAAGE,QAAQ,CAAC,CAAD,CAAlB;AACD,SAJD,MAIO,IAAIC,OAAO,CAACtG,UAAR,CAAmBwG,OAAnB,MAAgCvC,SAApC,EAA+C;AACpDiC,UAAAA,OAAO,GAAGK,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAV;AACA8C,UAAAA,OAAO,GAAGI,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAV;AACA6C,UAAAA,OAAO,GAAGA,OAAO,CAACpE,MAAR,CAAeyE,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAf,CAAV;AACD,SAJM,MAIA,IAAIiD,OAAO,CAACtG,UAAR,CAAmBwG,OAAnB,MAAgCpB,YAApC,EAAkD;AACvDiB,UAAAA,QAAQ,GAAG,KAAKI,SAAL,CAAeF,OAAO,CAAClH,KAAvB,CAAX;AACA6G,UAAAA,OAAO,GAAGG,QAAQ,CAAC,CAAD,CAAlB;AACAF,UAAAA,OAAO,GAAGE,QAAQ,CAAC,CAAD,CAAlB;AACD,SAJM,MAIA,IAAIC,OAAO,CAACtG,UAAR,CAAmBwG,OAAnB,MAAgCnB,SAApC,EAA+C;AACpDc,UAAAA,OAAO,GAAGI,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAV;AACA6C,UAAAA,OAAO,GAAGK,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAV;AACD,SAHM,MAGA,IAAIiD,OAAO,CAACtG,UAAR,CAAmBwG,OAAnB,MAAgClB,OAApC,EAA6C;AAClD,cAAIiB,OAAO,CAAClH,KAAR,CAAc,CAAd,EAAiBT,IAAjB,GAAwB,CAA5B,EAA+B;AAC7B,gBAAI2H,OAAO,CAAClH,KAAR,CAAc,CAAd,EAAiBP,SAAjB,KAA+B,GAAnC,EAAwC;AACtCoH,cAAAA,OAAO,GAAGK,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAV;AACA8C,cAAAA,OAAO,GAAGI,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAV;AACA6C,cAAAA,OAAO,CAACxF,IAAR,CAAa6F,OAAO,CAAClH,KAAR,CAAc,CAAd,CAAb;AACD,aAJD,MAIO;AACLgH,cAAAA,QAAQ,GAAG,KAAKI,SAAL,CAAeF,OAAO,CAAClH,KAAvB,CAAX;AACA6G,cAAAA,OAAO,GAAGG,QAAQ,CAAC,CAAD,CAAlB;AACAF,cAAAA,OAAO,GAAGE,QAAQ,CAAC,CAAD,CAAlB;AACD;AACF,WAVD,MAUO,IAAIE,OAAO,CAAClH,KAAR,CAAc,CAAd,EAAiBT,IAAjB,GAAwB,EAA5B,EAAgC;AACrC,gBAAI2H,OAAO,CAAClH,KAAR,CAAc,CAAd,EAAiBP,SAAjB,KAA+B,GAAnC,EAAwC;AACtCoH,cAAAA,OAAO,GAAGK,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAV;AACA8C,cAAAA,OAAO,GAAGI,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAV;AACA6C,cAAAA,OAAO,CAACxF,IAAR,CAAa6F,OAAO,CAAClH,KAAR,CAAc,CAAd,CAAb;AACD,aAJD,MAIO;AACL6G,cAAAA,OAAO,GAAGK,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAV;AACA8C,cAAAA,OAAO,GAAGI,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAV;AACA6C,cAAAA,OAAO,GAAGA,OAAO,CAACpE,MAAR,CAAeyE,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAf,CAAV;AACD;AACF,WAVM,MAUA,IAAIkD,OAAO,CAAClH,KAAR,CAAc,CAAd,EAAiBP,SAAjB,KAA+B,GAA/B,IAAsCyH,OAAO,CAAClH,KAAR,CAAc,CAAd,EAAiBT,IAAjB,GAAwB,CAA9D,IAAmE2H,OAAO,CAAClH,KAAR,CAAc,CAAd,EAAiBP,SAAjB,KAA+B,GAAtG,EAA2G;AAChHoH,YAAAA,OAAO,GAAGK,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAV;AACA8C,YAAAA,OAAO,GAAGI,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAV;AACA6C,YAAAA,OAAO,CAACxF,IAAR,CAAa6F,OAAO,CAAClH,KAAR,CAAc,CAAd,CAAb;AACD,WAJM,MAIA;AACL6G,YAAAA,OAAO,GAAGK,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAV;AACA8C,YAAAA,OAAO,GAAGI,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAV;AACA6C,YAAAA,OAAO,GAAGA,OAAO,CAACpE,MAAR,CAAeyE,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAf,CAAV;AACD;AACF,SA9BM,MA8BA,IAAIiD,OAAO,CAACtG,UAAR,CAAmBwG,OAAnB,MAAgCjB,OAApC,EAA6C;AAClD,cAAIgB,OAAO,CAAClH,KAAR,CAAc,CAAd,EAAiBT,IAAjB,IAAyBR,MAAM,CAACS,OAAP,CAAe,GAAf,CAAzB,IAAgD0H,OAAO,CAAClH,KAAR,CAAc,CAAd,EAAiBT,IAAjB,IAAyBR,MAAM,CAACS,OAAP,CAAe,GAAf,CAAzE,IAAgG0H,OAAO,CAAClH,KAAR,CAAc,CAAd,EAAiBP,SAAjB,KAA+B,GAAnI,EAAwI;AACtI,gBAAI4H,UAAU,GAAGH,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAjB;AACAqD,YAAAA,UAAU,GAAGA,UAAU,CAAC5E,MAAX,CAAkByE,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAlB,CAAb;AACAgD,YAAAA,QAAQ,GAAG,KAAKI,SAAL,CAAeC,UAAf,CAAX;;AACA,gBAAIL,QAAQ,CAAC,CAAD,CAAZ,EAAiB;AACfH,cAAAA,OAAO,GAAGG,QAAQ,CAAC,CAAD,CAAlB;AACAF,cAAAA,OAAO,GAAGE,QAAQ,CAAC,CAAD,CAAlB;AACAF,cAAAA,OAAO,CAACzF,IAAR,CAAa6F,OAAO,CAAClH,KAAR,CAAc,CAAd,CAAb;AACD,aAJD,MAIO;AACL6G,cAAAA,OAAO,GAAGK,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAV;AACA8C,cAAAA,OAAO,GAAGI,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAV;AACA6C,cAAAA,OAAO,GAAGA,OAAO,CAACpE,MAAR,CAAeyE,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAf,CAAV;AACD;AACF,WAbD,MAaO;AACLgD,YAAAA,QAAQ,GAAG,KAAKI,SAAL,CAAeF,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAf,CAAX;;AACA,gBAAIgD,QAAQ,CAAC,CAAD,CAAZ,EAAiB;AACfH,cAAAA,OAAO,GAAGG,QAAQ,CAAC,CAAD,CAAlB;AACAF,cAAAA,OAAO,GAAGI,OAAO,CAAClH,KAAR,CAAcgE,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAV;AACD,aAHD,MAGO;AACLgD,cAAAA,QAAQ,GAAG,KAAKI,SAAL,CAAeF,OAAO,CAAClH,KAAvB,CAAX;AACA6G,cAAAA,OAAO,GAAGG,QAAQ,CAAC,CAAD,CAAlB;AACAF,cAAAA,OAAO,GAAGE,QAAQ,CAAC,CAAD,CAAlB;AACD;AACF;AACF,SAzBM,MAyBA;AACLA,UAAAA,QAAQ,GAAG,KAAKI,SAAL,CAAeF,OAAO,CAAClH,KAAvB,CAAX;AACA6G,UAAAA,OAAO,GAAGG,QAAQ,CAAC,CAAD,CAAlB;AACAF,UAAAA,OAAO,GAAGE,QAAQ,CAAC,CAAD,CAAlB;AACD;AACF,OAhFM,MAgFA,IAAID,SAAS,KAAKvC,WAAlB,EAA+B;AACpC,YAAI,KAAK6B,QAAL,CAAcrG,KAAd,CAAoB,CAApB,EAAuBT,IAAvB,GAA8B,CAAlC,EAAqC;AACnCsH,UAAAA,OAAO,GAAG,KAAKR,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA8C,UAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,UAAAA,OAAO,CAACxF,IAAR,CAAa,KAAKgF,QAAL,CAAcrG,KAAd,CAAoB,CAApB,CAAb;AACD,SAJD,MAIO,IAAI,KAAKqG,QAAL,CAAcrG,KAAd,CAAoB,CAApB,EAAuBT,IAAvB,GAA8B,EAA9B,IAAoC,KAAK8G,QAAL,CAAcrG,KAAd,CAAoB,CAApB,EAAuBP,SAAvB,KAAqC,GAA7E,EAAkF;AACvFoH,UAAAA,OAAO,GAAG,KAAKR,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA8C,UAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,UAAAA,OAAO,CAACxF,IAAR,CAAa,KAAKgF,QAAL,CAAcrG,KAAd,CAAoB,CAApB,CAAb;AACD,SAJM,MAIA;AACL6G,UAAAA,OAAO,GAAG,KAAKR,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA8C,UAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,UAAAA,OAAO,GAAGA,OAAO,CAACpE,MAAR,CAAe,KAAK4D,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAf,CAAV;AACD;AACF,OAdM,MAcA,IAAI+C,SAAS,KAAKjB,eAAlB,EAAmC;AACxCgB,QAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,QAAAA,OAAO,GAAG,KAAKR,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,QAAAA,OAAO,CAACxF,IAAR,CAAa,KAAKgF,QAAL,CAAcrG,KAAd,CAAoB,CAApB,CAAb;AACA6G,QAAAA,OAAO,CAACxF,IAAR,CAAa,KAAKgF,QAAL,CAAcrG,KAAd,CAAoB,CAApB,CAAb;AACD,OALM,MAKA,IAAI+G,SAAS,KAAKpC,mBAAlB,EAAuC;AAC5CkC,QAAAA,OAAO,GAAG,KAAKR,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA8C,QAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,QAAAA,OAAO,GAAGA,OAAO,CAACpE,MAAR,CAAe,KAAK4D,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAf,CAAV;AACD,OAJM,MAIA,IAAI+C,SAAS,KAAKnC,SAAlB,EAA6B;AAClC,YAAI,KAAKyB,QAAL,CAAcrG,KAAd,CAAoB,CAApB,EAAuBP,SAAvB,KAAqC,GAArC,IAA4C,KAAK4G,QAAL,CAAcrG,KAAd,CAAoB,CAApB,EAAuBP,SAAvB,KAAqC,GAAjF,IAAwF,KAAK4G,QAAL,CAAcrG,KAAd,CAAoB,CAApB,EAAuBP,SAAvB,KAAqC,GAAjI,EAAsI;AACpIoH,UAAAA,OAAO,GAAG,KAAKR,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA8C,UAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACD,SAHD,MAGO;AACL6C,UAAAA,OAAO,GAAG,KAAKR,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA8C,UAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,UAAAA,OAAO,GAAGA,OAAO,CAACpE,MAAR,CAAe,KAAK4D,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAf,CAAV;AACD;AACF,OATM,MASA,IAAI+C,SAAS,KAAKhB,YAAlB,EAAgC;AACrC,YAAI,KAAKM,QAAL,CAAcrG,KAAd,CAAoB,CAApB,EAAuBP,SAAvB,KAAqC,GAAzC,EAA8C;AAC5CoH,UAAAA,OAAO,GAAG,KAAKR,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA8C,UAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,UAAAA,OAAO,GAAGA,OAAO,CAACpE,MAAR,CAAe,KAAK4D,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAf,CAAV;AACD,SAJD,MAIO;AACL6C,UAAAA,OAAO,GAAG,KAAKR,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA8C,UAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,UAAAA,OAAO,GAAGA,OAAO,CAACpE,MAAR,CAAe,KAAK4D,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAf,CAAV;AACD;AACF,OAVM,MAUA,IAAI+C,SAAS,KAAKf,SAAlB,EAA6B;AAClCc,QAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,QAAAA,OAAO,GAAG,KAAKR,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACD,OAHM,MAGA,IAAI+C,SAAS,KAAKd,OAAlB,EAA2B;AAChC,YAAI,KAAKI,QAAL,CAAcrG,KAAd,CAAoB,CAApB,EAAuBT,IAAvB,GAA8B,CAAlC,EAAqC;AACnCsH,UAAAA,OAAO,GAAG,KAAKR,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA8C,UAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,UAAAA,OAAO,CAACxF,IAAR,CAAa,KAAKgF,QAAL,CAAcrG,KAAd,CAAoB,CAApB,CAAb;AACD,SAJD,MAIO,IAAI,KAAKqG,QAAL,CAAcrG,KAAd,CAAoB,CAApB,EAAuBT,IAAvB,GAA8B,EAAlC,EAAsC;AAC3C,cAAI,KAAK8G,QAAL,CAAcrG,KAAd,CAAoB,CAApB,EAAuBP,SAAvB,KAAqC,GAAzC,EAA8C;AAC5CoH,YAAAA,OAAO,GAAG,KAAKR,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA8C,YAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,YAAAA,OAAO,CAACxF,IAAR,CAAa,KAAKgF,QAAL,CAAcrG,KAAd,CAAoB,CAApB,CAAb;AACD,WAJD,MAIO;AACL6G,YAAAA,OAAO,GAAG,KAAKR,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA8C,YAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,YAAAA,OAAO,GAAGA,OAAO,CAACpE,MAAR,CAAe,KAAK4D,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAf,CAAV;AACD;AACF,SAVM,MAUA,IAAI,KAAKqC,QAAL,CAAcrG,KAAd,CAAoB,CAApB,EAAuBP,SAAvB,KAAqC,GAArC,IAA4C,KAAK4G,QAAL,CAAcrG,KAAd,CAAoB,CAApB,EAAuBT,IAAvB,GAA8B,CAA1E,IAA+E,KAAK8G,QAAL,CAAcrG,KAAd,CAAoB,CAApB,EAAuBP,SAAvB,KAAqC,GAAxH,EAA6H;AAClIoH,UAAAA,OAAO,GAAG,KAAKR,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA8C,UAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,UAAAA,OAAO,CAACxF,IAAR,CAAa,KAAKgF,QAAL,CAAcrG,KAAd,CAAoB,CAApB,CAAb;AACD,SAJM,MAIA;AACL6G,UAAAA,OAAO,GAAG,KAAKR,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA8C,UAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,UAAAA,OAAO,GAAGA,OAAO,CAACpE,MAAR,CAAe,KAAK4D,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAf,CAAV;AACD;AACF,OAxBM,MAwBA,IAAI+C,SAAS,KAAKb,OAAlB,EAA2B;AAChCW,QAAAA,OAAO,GAAG,KAAKR,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA8C,QAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,QAAAA,OAAO,GAAGA,OAAO,CAACpE,MAAR,CAAe,KAAK4D,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAf,CAAV;AACD,OAJM,MAIA;AACL6C,QAAAA,OAAO,GAAG,CAAC,KAAKR,QAAL,CAAcrG,KAAd,CAAoB,CAApB,CAAD,CAAV;AACA8G,QAAAA,OAAO,GAAG,KAAKT,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAV;AACA6C,QAAAA,OAAO,GAAGA,OAAO,CAACpE,MAAR,CAAe,KAAK4D,QAAL,CAAcrG,KAAd,CAAoBgE,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAf,CAAV;AACD;;AAED,WAAKsC,MAAL,GAAcvG,IAAI,CAACyB,KAAL,CAAWqF,OAAX,EAAoB,KAAKJ,MAAzB,CAAd;AACA,WAAKF,MAAL,GAAcxG,IAAI,CAACyB,KAAL,CAAWsF,OAAX,EAAoB,KAAKN,MAAzB,CAAd;AACD;AAED;;;;;;;AAKAY,IAAAA,SAAS,CAACpH,KAAD,EAAQ;AACf,UAAI6G,OAAJ,EAAaS,eAAb,EAA8BC,WAA9B,EAA2CC,QAA3C;AACA,UAAIC,YAAY,GAAG,CACjB,IAAIhE,aAAJ,CAAkBzD,KAAlB,EAAyB,IAAIsD,IAAJ,CAAS,gBAAT,CAAzB,CADiB,EAEjB,IAAIG,aAAJ,CAAkBzD,KAAlB,EAAyB,IAAIsD,IAAJ,CAAS,gBAAT,CAAzB,CAFiB,EAGjB,IAAIG,aAAJ,CAAkBzD,KAAlB,EAAyB,KAAKE,IAA9B,CAHiB,EAIjB,IAAI2E,KAAJ,CAAU7E,KAAV,EAAiB,IAAIsD,IAAJ,CAAS,gBAAT,CAAjB,CAJiB,EAKjB,IAAIuB,KAAJ,CAAU7E,KAAV,EAAiB,IAAIsD,IAAJ,CAAS,gBAAT,CAAjB,CALiB,EAMjB,IAAIuB,KAAJ,CAAU7E,KAAV,EAAiB,KAAKE,IAAtB,CANiB,EAOjB,IAAI6D,QAAJ,CAAa/D,KAAb,EAAoB,IAAIsD,IAAJ,CAAS,gBAAT,CAApB,CAPiB,EAQjB,IAAIS,QAAJ,CAAa/D,KAAb,EAAoB,IAAIsD,IAAJ,CAAS,gBAAT,CAApB,CARiB,EASjB,IAAIS,QAAJ,CAAa/D,KAAb,EAAoB,KAAKE,IAAzB,CATiB,CAAnB;;AAYA,WAAK,IAAIW,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC4G,YAAY,CAAC7G,MAA7B,EAAqCC,CAAC,EAAtC,EAA0C;AACxC,YAAIe,IAAI,GAAG6F,YAAY,CAAC5G,CAAD,CAAvB;;AACA,YAAIe,IAAI,CAACL,UAAT,EAAqB;AACnB,cAAIK,IAAI,CAACrB,QAAL,KAAkB,CAAtB,EAAyB;AACvB+G,YAAAA,eAAe,GAAG,CAAC1F,IAAI,CAAC5B,KAAL,CAAW,CAAX,CAAD,EAAgB4B,IAAI,CAAC5B,KAAL,CAAW,CAAX,CAAhB,CAAlB;AACD,WAFD,MAEO,IAAI4B,IAAI,CAACrB,QAAL,KAAkB,CAAtB,EAAyB;AAC9B+G,YAAAA,eAAe,GAAG,CAAC1F,IAAI,CAAC5B,KAAL,CAAW,CAAX,CAAD,CAAlB;;AACA,gBAAIA,KAAK,CAACY,MAAN,GAAe,CAAnB,EAAsB;AACpB0G,cAAAA,eAAe,CAACjG,IAAhB,CAAqBO,IAAI,CAAC5B,KAAL,CAAW,CAAX,CAArB;AACD;AACF,WALM,MAKA,IAAIA,KAAK,CAACY,MAAN,GAAe,CAAnB,EAAsB;AAC3B0G,YAAAA,eAAe,GAAG,CAAC1F,IAAI,CAAC5B,KAAL,CAAW,CAAX,CAAD,CAAlB;;AACA,gBAAIA,KAAK,CAACY,MAAN,GAAe,CAAnB,EAAsB;AACpB0G,cAAAA,eAAe,CAACjG,IAAhB,CAAqBO,IAAI,CAAC5B,KAAL,CAAW,CAAX,CAArB;AACD;AACF;;AACD,cAAIsH,eAAJ,EAAqB;AACnBA,YAAAA,eAAe,GAAGA,eAAe,CAAC1H,IAAhB,CAAqBZ,IAAI,CAACY,IAA1B,CAAlB;;AACA,gBAAI,CAAC2H,WAAD,IAAgBA,WAAW,CAAC,CAAD,CAAX,CAAehI,IAAf,GAAsB+H,eAAe,CAAC,CAAD,CAAf,CAAmB/H,IAAzD,IAAkEgI,WAAW,CAAC3G,MAAZ,GAAqB,CAArB,IAA0B2G,WAAW,CAAC,CAAD,CAAX,CAAehI,IAAf,KAAwB+H,eAAe,CAAC,CAAD,CAAf,CAAmB/H,IAArE,IAA6EgI,WAAW,CAAC,CAAD,CAAX,CAAehI,IAAf,GAAsB+H,eAAe,CAAC,CAAD,CAAf,CAAmB/H,IAA5L,EAAmM;AACjMgI,cAAAA,WAAW,GAAGD,eAAd;AACAE,cAAAA,QAAQ,GAAG5F,IAAX;AACD;AACF,WAND,MAMO,IAAI,CAAC4F,QAAL,EAAe;AACpBA,YAAAA,QAAQ,GAAG5F,IAAX;AACA;AACD;AACF;AACF;;AAED,UAAI4F,QAAJ,EAAc;AACZ,YAAIA,QAAQ,CAACjH,QAAT,KAAsB,CAA1B,EAA6B;AAC3BsG,UAAAA,OAAO,GAAGW,QAAQ,CAACxH,KAAT,CAAegE,KAAf,CAAqB,CAArB,EAAwB,CAAxB,CAAV;AACD,SAFD,MAEO,IAAIwD,QAAQ,CAACjH,QAAT,KAAsB,CAA1B,EAA6B;AAClCsG,UAAAA,OAAO,GAAGW,QAAQ,CAACxH,KAAT,CAAegE,KAAf,CAAqB,CAArB,EAAwB,CAAxB,CAAV;AACD,SAFM,MAEA;AACL6C,UAAAA,OAAO,GAAGW,QAAQ,CAACxH,KAAT,CAAegE,KAAf,CAAqB,CAArB,EAAwB,CAAxB,CAAV;AACD;AACF;;AAED,aAAO,CAAC6C,OAAD,EAAUU,WAAV,CAAP;AACD;AAED;;;;;;AAIAG,IAAAA,cAAc,GAAG;AACf,UAAIC,YAAY,GAAG5H,IAAI,CAAC+C,OAAL,CAAa,CAAC,KAAKwD,MAAN,EAAc,KAAKC,MAAnB,CAAb,CAAnB;AAEA,aAAO,EAAEoB,YAAY,CAAC/G,MAAb,KAAwB,CAAxB,IAA6B+G,YAAY,CAAC,CAAD,CAAZ,KAAoB,KAAKpB,MAAxD,CAAP;AACD;AAED;;;;;;;;;AAOA,WAAOzD,OAAP,CAAe8E,MAAf,EAAuBC,MAAvB,EAA+B;AAC7B,UAAI,CAACD,MAAM,CAACF,cAAP,EAAL,EAA8B;AAC5B,YAAIG,MAAM,CAACH,cAAP,EAAJ,EAA6B;AAC3B,iBAAO,CAAC,CAAR;AACD,SAH2B,CAI5B;AACA;;;AACA,eAAO,CAAP;AACD;;AAED,UAAI,CAACG,MAAM,CAACH,cAAP,EAAL,EAA8B;AAC5B,eAAO,CAAP;AACD;;AAED,UAAII,QAAQ,GAAG/H,IAAI,CAAC+C,OAAL,CAAa,CAAC8E,MAAM,CAACtB,MAAR,EAAgBuB,MAAM,CAACvB,MAAvB,CAAb,CAAf;AACA,UAAIyB,QAAQ,GAAGhI,IAAI,CAAC+C,OAAL,CAAa,CAAC8E,MAAM,CAACrB,MAAR,EAAgBsB,MAAM,CAACtB,MAAvB,CAAb,CAAf,CAf6B,CAiB7B;;AACA,UAAIuB,QAAQ,CAAClH,MAAT,KAAoB,CAApB,IAAyBkH,QAAQ,CAAC,CAAD,CAAR,KAAgBF,MAAM,CAACtB,MAApD,EAA4D;AAC1D,YAAIyB,QAAQ,CAACnH,MAAT,KAAoB,CAApB,IAAyBmH,QAAQ,CAAC,CAAD,CAAR,KAAgBH,MAAM,CAACrB,MAApD,EAA4D;AAC1D;AACA,iBAAO,CAAP;AACD,SAJyD,CAK1D;;;AACA,eAAO,CAAP;AACD;;AAED,UAAIwB,QAAQ,CAACnH,MAAT,KAAoB,CAApB,IAAyBmH,QAAQ,CAAC,CAAD,CAAR,KAAgBH,MAAM,CAACrB,MAApD,EAA4D;AAC1D;AACA,eAAO,CAAP;AACD,OA9B4B,CAgC7B;;;AACA,aAAO,CAAC,CAAR;AACD;AAED;;;;;;;;;;AAQA,WAAOyB,QAAP,CAAgB1B,MAAhB,EAAwBC,MAAxB,EAAgC;AAC9B,UAAI0B,QAAQ,GAAG,EAAf;;AAEA,UAAIvB,KAAK,CAACC,OAAN,CAAcL,MAAd,CAAJ,EAA2B;AACzBA,QAAAA,MAAM,GAAGvG,IAAI,CAACyB,KAAL,CAAW8E,MAAX,EAAmB,IAAIhD,IAAJ,CAAS,eAAT,CAAnB,CAAT;AACD;;AACD2E,MAAAA,QAAQ,GAAGA,QAAQ,CAACxF,MAAT,CAAgB6D,MAAM,CAAClG,QAAvB,CAAX;;AACA,UAAIsG,KAAK,CAACC,OAAN,CAAcJ,MAAd,CAAJ,EAA2B;AACzBA,QAAAA,MAAM,GAAGxG,IAAI,CAACyB,KAAL,CAAW+E,MAAX,EAAmB,IAAIjD,IAAJ,CAAS,eAAT,CAAnB,CAAT;AACD;;AACD2E,MAAAA,QAAQ,GAAGA,QAAQ,CAACxF,MAAT,CAAgB8D,MAAM,CAACnG,QAAvB,CAAX;AAEA,UAAIsB,MAAM,GAAG,IAAI0E,iBAAJ,CAAsB6B,QAAtB,CAAb;AACAvG,MAAAA,MAAM,CAAC4E,MAAP,GAAgBA,MAAhB;AACA5E,MAAAA,MAAM,CAAC6E,MAAP,GAAgBA,MAAhB;AAEA,aAAO7E,MAAP;AACD;AAED;;;;;;;;AAMA,WAAOF,KAAP,CAAayG,QAAb,EAAuB;AACrB,UAAIvG,MAAM,GAAG,IAAI0E,iBAAJ,CAAsB6B,QAAQ,GAAGA,QAAQ,IAAI,CAAC,EAAD,CAA7C,CAAb;AACAvG,MAAAA,MAAM,CAACkF,aAAP;AAEA,aAAOlF,MAAP;AACD;;AA3WqB;;AA8WxB,MAAIwG,SAAS,GAAG;AACd,gBAAY;AACV,qBAAe,CADL;AAEV,oBAAc,CAACzE,aAAD,EAAgBe,WAAhB,EAA6BI,SAA7B,EAAwCC,KAAxC,EAA+Cd,QAA/C,EAAyDgC,YAAzD,EAAuEE,OAAvE,EAAgFC,OAAhF,EAAyFC,QAAzF,CAFJ;AAGV,mBAAa,IAHH;AAIV,oBAAc,CAJJ;AAKV,qBAAe,CALL;AAMV,mBAAa,CANH;AAOV,yBAAmB,IAPT;AAQV,mBAAa;AARH,KADE;AAWd,mBAAe;AACb,qBAAe,CADF;AAEb,oBAAc,CAAC1C,aAAD,EAAgBe,WAAhB,EAA6BI,SAA7B,EAAwCC,KAAxC,EAA+Cd,QAA/C,EAAyDgC,YAAzD,EAAuEE,OAAvE,EAAgFC,OAAhF,EAAyFC,QAAzF,CAFD;AAGb,mBAAa,IAHA;AAIb,oBAAc,CAJD;AAKb,qBAAe,CALF;AAMb,mBAAa,CANA;AAOb,yBAAmB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,CAPN;AAQb,mBAAa;AARA,KAXD;AAqBd,aAAS;AACP,qBAAe,CADR;AAEP,oBAAc,CAACjC,iBAAD,EAAoBE,WAApB,EAAiCD,cAAjC,EAAiDV,aAAjD,EAAgEe,WAAhE,EAA6EI,SAA7E,EAAwFC,KAAxF,EAA+Fd,QAA/F,EAAyGgC,YAAzG,EAAuHE,OAAvH,EAAgIE,QAAhI,CAFP;AAGP,mBAAa,GAHN;AAIP,oBAAc,CAJP;AAKP,qBAAe,CALR;AAMP,mBAAa,CANN;AAOP,yBAAmB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,CAPZ;AAQP,mBAAa;AARN,KArBK;AA+Bd,kBAAc;AACZ,qBAAe,CADH;AAEZ,oBAAc,CAACjC,iBAAD,EAAoBQ,SAApB,EAA+BP,cAA/B,EAA+CC,WAA/C,EAA4DX,aAA5D,EAA2Ee,WAA3E,EAAwFI,SAAxF,EAAmGC,KAAnG,EAA0Gd,QAA1G,EAAoHgC,YAApH,EAAkII,QAAlI,CAFF;AAGZ,mBAAa,GAHD;AAIZ,oBAAc,CAJF;AAKZ,qBAAe,CALH;AAMZ,mBAAa,CAND;AAOZ,yBAAmB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,CAPP;AAQZ,mBAAa;AARD,KA/BA;AAyCd,iBAAa;AACX,qBAAe,CADJ;AAEX,oBAAc,CAAC1C,aAAD,EAAgBsC,YAAhB,EAA8BhC,QAA9B,EAAwCc,KAAxC,EAA+CqB,OAA/C,EAAwDC,QAAxD,CAFH;AAGX,mBAAa,IAHF;AAIX,oBAAc,CAJH;AAKX,qBAAe,CALJ;AAMX,mBAAa,CANF;AAOX,yBAAmB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAPR;AAQX,mBAAa;AARF,KAzCC;AAmDd,gBAAY;AACV,qBAAe,CADL;AAEV,oBAAc,CAAC3B,WAAD,EAAcf,aAAd,EAA6BsC,YAA7B,EAA2ClB,KAA3C,EAAkDd,QAAlD,EAA4DkC,OAA5D,EAAqEC,OAArE,EAA8EC,QAA9E,CAFJ;AAGV,mBAAa,IAHH;AAIV,oBAAc,CAJJ;AAKV,qBAAe,CALL;AAMV,mBAAa,CANH;AAOV,yBAAmB,IAPT;AAQV,mBAAa;AARH,KAnDE;AA6Dd,qBAAiB;AACf,qBAAe,CADA;AAEf,oBAAc,CAAC3B,WAAD,EAAcf,aAAd,EAA6BsC,YAA7B,EAA2ClB,KAA3C,EAAkDd,QAAlD,EAA4DkC,OAA5D,EAAqEC,OAArE,EAA8EC,QAA9E,CAFC;AAGf,mBAAa,IAHE;AAIf,oBAAc,CAJC;AAKf,qBAAe,CALA;AAMf,mBAAa,CANE;AAOf,yBAAmB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAPJ;AAQf,mBAAa;AARE,KA7DH;AAuEd,uBAAmB;AACjB,qBAAe,CADE;AAEjB,oBAAc,CAAC/B,WAAD,EAAcE,mBAAd,EAAmCb,aAAnC,EAAkDoB,KAAlD,EAAyDd,QAAzD,EAAmES,WAAnE,EAAgFsB,eAAhF,EAAiGnB,mBAAjG,EAAsHC,SAAtH,EAAiImB,YAAjI,EAA+IC,SAA/I,EAA0JC,OAA1J,EAAmKC,OAAnK,EAA4KC,QAA5K,CAFG;AAGjB,mBAAa,GAHI;AAIjB,oBAAc,CAJG;AAKjB,qBAAe,CALE;AAMjB,mBAAa,CANI;AAOjB,yBAAmB;AAPF,KAvEL;AAgFd,sBAAkB;AAChB,qBAAe,CADC;AAEhB,oBAAc,CAAC3B,WAAD,EAAcI,SAAd,EAAyBmB,YAAzB,EAAuCC,SAAvC,EAAkDC,OAAlD,EAA2DC,OAA3D,EAAoEC,QAApE,CAFE;AAGhB,mBAAa,GAHG;AAIhB,oBAAc,CAJE;AAKhB,qBAAe,CALC;AAMhB,mBAAa,CANG;AAOhB,yBAAmB;AAPH,KAhFJ;AAyFd,sBAAkB;AAChB,qBAAe,CADC;AAEhB,oBAAc,CAAC1C,aAAD,EAAgBoB,KAAhB,EAAuBd,QAAvB,CAFE;AAGhB,mBAAa,GAHG;AAIhB,oBAAc,CAJE;AAKhB,qBAAe,CALC;AAMhB,mBAAa,CANG;AAOhB,yBAAmB;AAPH,KAzFJ;AAkGd,sBAAkB;AAChB,qBAAe,CADC;AAEhB,oBAAc,CAACN,aAAD,EAAgBoB,KAAhB,EAAuBd,QAAvB,CAFE;AAGhB,mBAAa,GAHG;AAIhB,oBAAc,CAJE;AAKhB,qBAAe,CALC;AAMhB,mBAAa,CANG;AAOhB,yBAAmB;AAPH,KAlGJ;AA2Gd,qBAAiB;AACf,qBAAe,CADA;AAEf,oBAAc,CAACK,WAAD,EAAcX,aAAd,EAA6Be,WAA7B,EAA0CI,SAA1C,EAAqDC,KAArD,EAA4Dd,QAA5D,EAAsEgC,YAAtE,EAAoFE,OAApF,EAA6FC,OAA7F,EAAsGC,QAAtG,CAFC;AAGf,mBAAa,GAHE;AAIf,oBAAc,CAJC;AAKf,qBAAe,CALA;AAMf,mBAAa,CANE;AAOf,yBAAmB;AAPJ,KA3GH;AAoHd,qBAAiB;AACf,qBAAe,CADA;AAEf,oBAAc,CAACD,OAAD,EAAUC,QAAV,CAFC;AAGf,mBAAa,GAHE;AAIf,oBAAc,CAJC;AAKf,qBAAe,CALA;AAMf,mBAAa,CANE;AAOf,yBAAmB;AAPJ;AApHH,GAAhB;AA+HA;;;;AAGA,QAAM7C,IAAN,CAAW;AACTrE,IAAAA,WAAW,CAAC4E,KAAD,EAAQ;AACjB,WAAKA,KAAL,GAAaA,KAAb;AACA,WAAKQ,WAAL,GAAmB,CAAnB;AACA,WAAK1D,UAAL,GAAkB,EAAlB;AACA,WAAKlB,SAAL,GAAiB,IAAjB;AACA,WAAKuC,UAAL,GAAkB,CAAlB;AACA,WAAK+C,WAAL,GAAmB,CAAnB;AACA,WAAKnB,SAAL,GAAiB,CAAjB;AACA,WAAKnD,eAAL,GAAuB,IAAvB;AACA,WAAKgE,SAAL,GAAiB,IAAjB,CATiB,CAWjB;;AACA,UAAI,CAAC,KAAKZ,KAAN,IAAe,CAACqE,SAAS,CAAC,KAAKrE,KAAN,CAA7B,EAA2C;AACzC,aAAKA,KAAL,GAAa,UAAb;AACD;;AACD,WAAKQ,WAAL,GAAmB6D,SAAS,CAAC,KAAKrE,KAAN,CAAT,CAAsB,aAAtB,CAAnB;AACA,WAAKlD,UAAL,GAAkBuH,SAAS,CAAC,KAAKrE,KAAN,CAAT,CAAsB,YAAtB,CAAlB;AACA,WAAKpE,SAAL,GAAiByI,SAAS,CAAC,KAAKrE,KAAN,CAAT,CAAsB,WAAtB,CAAjB;AACA,WAAK7B,UAAL,GAAkBkG,SAAS,CAAC,KAAKrE,KAAN,CAAT,CAAsB,YAAtB,CAAlB;AACA,WAAKkB,WAAL,GAAmBmD,SAAS,CAAC,KAAKrE,KAAN,CAAT,CAAsB,aAAtB,CAAnB;AACA,WAAKD,SAAL,GAAiBsE,SAAS,CAAC,KAAKrE,KAAN,CAAT,CAAsB,WAAtB,CAAjB;AACA,WAAKpD,eAAL,GAAuByH,SAAS,CAAC,KAAKrE,KAAN,CAAT,CAAsB,iBAAtB,CAAvB;AACA,WAAKY,SAAL,GAAiByD,SAAS,CAAC,KAAKrE,KAAN,CAAT,CAAsB,WAAtB,CAAjB;AACD;;AAxBQ;;AA2BX,WAASsE,cAAT,CAAwBC,MAAxB,EAAgC;AAC9BA,IAAAA,MAAM,CAACpJ,IAAP,GAAcA,IAAd;AACAoJ,IAAAA,MAAM,CAACrI,IAAP,GAAcA,IAAd;AACAqI,IAAAA,MAAM,CAAC9E,IAAP,GAAcA,IAAd;AACA8E,IAAAA,MAAM,CAACnE,UAAP,GAAoBA,UAApB;AACAmE,IAAAA,MAAM,CAAClE,iBAAP,GAA2BA,iBAA3B;AACAkE,IAAAA,MAAM,CAACjE,cAAP,GAAwBA,cAAxB;AACAiE,IAAAA,MAAM,CAAChE,WAAP,GAAqBA,WAArB;AACAgE,IAAAA,MAAM,CAAC3E,aAAP,GAAuBA,aAAvB;AACA2E,IAAAA,MAAM,CAAC9D,mBAAP,GAA6BA,mBAA7B;AACA8D,IAAAA,MAAM,CAAC5D,WAAP,GAAqBA,WAArB;AACA4D,IAAAA,MAAM,CAAC1D,SAAP,GAAmBA,SAAnB;AACA0D,IAAAA,MAAM,CAACtC,eAAP,GAAyBA,eAAzB;AACAsC,IAAAA,MAAM,CAACzD,mBAAP,GAA6BA,mBAA7B;AACAyD,IAAAA,MAAM,CAACxD,SAAP,GAAmBA,SAAnB;AACAwD,IAAAA,MAAM,CAACvD,KAAP,GAAeA,KAAf;AACAuD,IAAAA,MAAM,CAACrE,QAAP,GAAkBA,QAAlB;AACAqE,IAAAA,MAAM,CAACrC,YAAP,GAAsBA,YAAtB;AACAqC,IAAAA,MAAM,CAACpC,SAAP,GAAmBA,SAAnB;AACAoC,IAAAA,MAAM,CAACnC,OAAP,GAAiBA,OAAjB;AACAmC,IAAAA,MAAM,CAAClC,OAAP,GAAiBA,OAAjB;AACAkC,IAAAA,MAAM,CAACjC,QAAP,GAAkBA,QAAlB;AACAiC,IAAAA,MAAM,CAAChC,iBAAP,GAA2BA,iBAA3B;AACD,GA/yDS,CAizDV;;;AACA,MAAI,OAAOiC,OAAP,KAAmB,WAAvB,EAAoC;AAClCF,IAAAA,cAAc,CAACE,OAAD,CAAd;AACD,GApzDS,CAszDV;;;AACA,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjCH,IAAAA,cAAc,CAACG,MAAD,CAAd;AACD;AAEF,CA3zDD","sourcesContent":["/**\n * pokersolver v2.1.2\n * Copyright (c) 2016, James Simpson of GoldFire Studios\n * http://goldfirestudios.com\n */\n\n(function() {\n  'use strict';\n\n  // NOTE: The 'joker' will be denoted with a value of 'O' and any suit.\n  var values = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];\n\n  /**\n   * Base Card class that defines a single card.\n   */\n  class Card {\n    constructor(str) {\n      this.value = str.substr(0, 1);\n      this.suit = str.substr(1, 1).toLowerCase();\n      this.rank = values.indexOf(this.value);\n      this.wildValue = str.substr(0, 1);\n    }\n\n    // TODO: Add a parameter to leave out the suit and update the this.descr calls.\n    toString() {\n      return this.wildValue.replace('T', '10') + this.suit;\n    }\n\n    static sort(a, b) {\n      if (a.rank > b.rank) {\n        return -1;\n      } else if (a.rank < b.rank) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n  }\n\n  /**\n   * Base Hand class that handles comparisons of full hands.\n   */\n  class Hand {\n    constructor(cards, name, game, canDisqualify) {\n      this.cardPool = [];\n      this.cards = [];\n      this.suits = {};\n      this.values = [];\n      this.wilds = [];\n      this.name = name;\n      this.game = game;\n      this.sfLength = 0;\n      this.alwaysQualifies = true;\n\n      // Qualification rules apply for dealer's hand.\n      // Also applies for single player games, like video poker.\n      if (canDisqualify && this.game.lowestQualified) {\n        this.alwaysQualifies = false;\n      }\n      \n      // Get rank based on game.\n      var handRank = this.game.handValues.length;\n      for (var i=0; i<this.game.handValues.length; i++) {\n        if (this.game.handValues[i] === this.constructor) {\n          break;\n        }\n      }\n      this.rank = handRank - i;\n\n      // Set up the pool of cards.\n      this.cardPool = cards.map(function(c) {\n        return (typeof c === 'string') ? new Card(c) : c;\n      });\n\n      // Fix the card ranks for wild cards, and sort.\n      for (var i=0; i<this.cardPool.length; i++) {\n        card = this.cardPool[i];\n        if (card.value === this.game.wildValue) {\n          card.rank = -1;\n        }\n      }\n      this.cardPool = this.cardPool.sort(Card.sort);\n\n      // Create the arrays of suits and values.\n      var obj, obj1, key, key1, card;\n      for (var i=0; i<this.cardPool.length; i++) {\n        // Make sure this value already exists in the object.\n        card = this.cardPool[i];\n\n        // We do something special if this is a wild card.\n        if (card.rank === -1) {\n          this.wilds.push(card);\n        } else {\n          (obj = this.suits)[key = card.suit] || (obj[key] = []);\n          (obj1 = this.values)[key1 = card.rank] || (obj1[key1] = []);\n\n          // Add the value to the array for that type in the object.\n          this.suits[card.suit].push(card);\n          this.values[card.rank].push(card);\n        }\n      }\n\n      this.values.reverse();\n      this.isPossible = this.solve();\n    }\n\n    /**\n     * Compare current hand with another to determine which is the winner.\n     * @param  {Hand} a Hand to compare to.\n     * @return {Number}\n     */\n    compare(a) {\n      if (this.rank < a.rank) {\n        return 1;\n      } else if (this.rank > a.rank) {\n        return -1;\n      }\n\n      var result = 0;\n      for (var i=0; i<=4; i++) {\n        if (this.cards[i] && a.cards[i] && this.cards[i].rank < a.cards[i].rank) {\n          result = 1;\n          break;\n        } else if (this.cards[i] && a.cards[i] && this.cards[i].rank > a.cards[i].rank) {\n          result = -1;\n          break;\n        }\n      }\n\n      return result;\n    }\n\n    /**\n     * Determine whether a hand loses to another.\n     * @param  {Hand} hand Hand to compare to.\n     * @return {Boolean}\n     */\n    loseTo(hand) {\n      return (this.compare(hand) > 0);\n    }\n\n    /**\n     * Determine the number of cards in a hand of a rank.\n     * @param  {Number} val Index of this.values.\n     * @return {Number} Number of cards having the rank, including wild cards.\n     */\n    getNumCardsByRank(val) {\n      var cards = this.values[val];\n      var checkCardsLength = (cards) ? cards.length : 0;\n\n      for (var i=0; i<this.wilds.length; i++) {\n        if (this.wilds[i].rank > -1) {\n          continue;\n        } else if (cards) {\n          if (this.game.wildStatus === 1 || cards[0].rank === values.length - 1) {\n            checkCardsLength += 1;\n          }\n        } else if (this.game.wildStatus === 1 || val === values.length - 1) {\n          checkCardsLength += 1;\n        }\n      }\n\n      return checkCardsLength;\n    }\n\n    /**\n     * Determine the cards in a suit for a flush.\n     * @param  {String} suit Key for this.suits.\n     * @param  {Boolean} setRanks Whether to set the ranks for the wild cards.\n     * @return {Array} Cards having the suit, including wild cards.\n     */\n    getCardsForFlush(suit, setRanks) {\n      var cards = (this.suits[suit] || []).sort(Card.sort);\n\n      for (var i=0; i<this.wilds.length; i++) {\n        var wild = this.wilds[i];\n\n        if (setRanks) {\n          var j=0;\n          while (j<values.length && j<cards.length) {\n            if (cards[j].rank === values.length-1-j) {\n              j += 1;\n            } else {\n              break;\n            }\n          }\n          wild.rank = values.length-1-j;\n          wild.wildValue = values[wild.rank];\n        }\n\n        cards.push(wild);\n        cards = cards.sort(Card.sort);\n      }\n\n      return cards;\n    }\n\n    /**\n     * Resets the rank and wild values of the wild cards.\n     */\n    resetWildCards() {\n      for (var i=0; i<this.wilds.length; i++) {\n        this.wilds[i].rank = -1;\n        this.wilds[i].wildValue = this.wilds[i].value;\n      }\n    }\n\n    /**\n     * Highest card comparison.\n     * @return {Array} Highest cards\n     */\n    nextHighest() {\n      var picks;\n      var excluding = [];\n      excluding = excluding.concat(this.cards);\n\n      picks = this.cardPool.filter(function(card) {\n        if (excluding.indexOf(card) < 0) {\n          return true;\n        }\n      });\n\n      // Account for remaining wild card when it must be ace.\n      if (this.game.wildStatus === 0) {\n        for (var i=0; i<picks.length; i++) {\n          var card = picks[i];\n          if (card.rank === -1) {\n            card.wildValue = 'A';\n            card.rank = values.length - 1;\n          }\n        }\n        picks = picks.sort(Card.sort);\n      }\n\n      return picks;\n    }\n\n    /**\n     * Return list of contained cards in human readable format.\n     * @return {String}\n     */\n    toString() {\n      var cards = this.cards.map(function(c) {\n        return c.toString();\n      });\n\n      return cards.join(', ');\n    }\n\n    /**\n     * Return array of contained cards.\n     * @return {Array}\n     */\n    toArray() {\n      var cards = this.cards.map(function(c) {\n        return c.toString();\n      });\n\n      return cards;\n    }\n\n    /**\n     * Determine if qualifying hand.\n     * @return {Boolean}\n     */\n    qualifiesHigh() {\n      if (!this.game.lowestQualified || this.alwaysQualifies) {\n        return true;\n      }\n\n      return (this.compare(Hand.solve(this.game.lowestQualified, this.game)) <= 0);\n    }\n\n    /**\n     * Find highest ranked hands and remove any that don't qualify or lose to another hand.\n     * @param  {Array} hands Hands to evaluate.\n     * @return {Array}       Winning hands.\n     */\n    static winners(hands) {\n      hands = hands.filter(function(h) {\n        return h.qualifiesHigh();\n      });\n\n      var highestRank = Math.max.apply(Math, hands.map(function(h) {\n        return h.rank;\n      }));\n\n      hands = hands.filter(function(h) {\n        return h.rank === highestRank;\n      });\n\n      hands = hands.filter(function(h) {\n        var lose = false;\n        for (var i=0; i<hands.length; i++) {\n          lose = h.loseTo(hands[i]);\n          if (lose) {\n            break;\n          }\n        }\n\n        return !lose;\n      });\n\n      return hands;\n    }\n\n    /**\n     * Build and return the best hand.\n     * @param  {Array} cards Array of cards (['Ad', '3c', 'Th', ...]).\n     * @param  {String} game Game being played.\n     * @param  {Boolean} canDisqualify Check for a qualified hand.\n     * @return {Hand}       Best hand.\n     */\n    static solve(cards, game, canDisqualify) {\n      game = game || 'standard';\n      game = (typeof game === 'string') ? new Game(game) : game;\n      cards = cards || [''];\n\n      var hands = game.handValues;\n      var result = null;\n\n      for (var i=0; i<hands.length; i++) {\n        result = new hands[i](cards, game, canDisqualify);\n        if (result.isPossible) {\n          break;\n        }\n      }\n\n      return result;\n    }\n\n    /**\n     * Separate cards based on if they are wild cards.\n     * @param  {Array} cards Array of cards (['Ad', '3c', 'Th', ...]).\n     * @param  {Game} game Game being played.\n     * @return {Array} [wilds, nonWilds] Wild and non-Wild Cards.\n     */\n    static stripWilds(cards, game) {\n      var card, wilds, nonWilds;\n      cards = cards || [''];\n      wilds = [];\n      nonWilds = [];\n\n      for (var i=0; i<cards.length; i++) {\n        card = cards[i];\n        if (card.rank === -1) {\n          wilds.push(cards[i]);  \n        } else {\n          nonWilds.push(cards[i]);  \n        }\n      }\n\n      return [wilds, nonWilds];\n    }\n  }\n\n  class StraightFlush extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Straight Flush', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n      var possibleStraight = null;\n      var nonCards = [];\n\n      for (var suit in this.suits) {\n        cards = this.getCardsForFlush(suit, false);\n        if (cards && cards.length >= this.game.sfQualify) {\n          possibleStraight = cards;\n          break;\n        } \n      }\n\n      if (possibleStraight) {\n        if (this.game.descr !== 'standard') {\n          for (var suit in this.suits) {\n            if (possibleStraight[0].suit !== suit) {\n              nonCards = nonCards.concat(this.suits[suit] || []);\n              nonCards = Hand.stripWilds(nonCards, this.game)[1];\n            }\n          }\n        }\n        var straight = new Straight(possibleStraight, this.game);\n        if (straight.isPossible) {\n          this.cards = straight.cards;\n          this.cards = this.cards.concat(nonCards);\n          this.sfLength = straight.sfLength;\n        }\n      }\n\n      if (this.cards[0] && this.cards[0].rank === 13) {\n        this.descr = 'Royal Flush';\n      } else if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + suit + ' High';\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n  }\n\n  class RoyalFlush extends StraightFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n      var result = super.solve();\n      return result && this.descr === 'Royal Flush';\n    }\n  }\n\n  class NaturalRoyalFlush extends RoyalFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      var i = 0;\n      this.resetWildCards();\n      var result = super.solve();\n      if (result && this.cards) {\n        for (i=0; i<this.game.sfQualify && i<this.cards.length; i++) {\n          if (this.cards[i].value === this.game.wildValue) {\n            result = false;\n            this.descr = 'Wild Royal Flush';\n            break;\n          }\n        }\n        if (i === this.game.sfQualify) {\n          this.descr = 'Royal Flush';\n        }\n      }\n      return result;\n    }\n  }\n\n  class WildRoyalFlush extends RoyalFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      var i = 0;\n      this.resetWildCards();\n      var result = super.solve();\n      if (result && this.cards) {\n        for (i=0; i<this.game.sfQualify && i<this.cards.length; i++) {\n          if (this.cards[i].value === this.game.wildValue) {\n            this.descr = 'Wild Royal Flush';\n            break;\n          }\n        }\n        if (i === this.game.sfQualify) {\n          result = false;\n          this.descr = 'Royal Flush';\n        }\n      }\n      return result;\n    }\n  }\n\n  class FiveOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Five of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 5) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<5; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-5));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 5) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 5;\n    }\n  }\n\n  class FourOfAKindPairPlus extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four of a Kind with Pair or Better', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 4) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<4; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          break;\n        }\n      }\n\n      if (this.cards.length === 4) {\n        for (i=0; i<this.values.length; i++) {\n          cards = this.values[i];\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n          if (this.getNumCardsByRank(i) >= 2) {\n            this.cards = this.cards.concat(cards || []);\n            for (var j=0; j<this.wilds.length; j++) {\n              var wild = this.wilds[j];\n              if (wild.rank !== -1) {\n                continue;\n              }\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-6));\n            break;\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[4].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n  }\n\n  class FourOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 4) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<4; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-4));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 4;\n    }\n  }\n\n  class FourWilds extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four Wild Cards', game, canDisqualify);\n    }\n\n    solve() {\n      if (this.wilds.length === 4) {\n        this.cards = this.wilds;\n        this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-4));\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        this.descr = this.name;\n      }\n\n      return this.cards.length >= 4;\n    }\n  }\n\n  class ThreeOfAKindTwoPair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three of a Kind with Two Pair', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<3; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          break;\n        }\n      }\n\n      if (this.cards.length === 3) {\n        for (var i=0; i<this.values.length; i++) {\n          var cards = this.values[i];\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n          if (this.cards.length > 5 && this.getNumCardsByRank(i) === 2) {\n            this.cards = this.cards.concat(cards || []);\n            for (var j=0; j<this.wilds.length; j++) {\n              var wild = this.wilds[j];\n              if (wild.rank !== -1) {\n                continue;\n              }\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-4));\n            break;\n          } else if (this.getNumCardsByRank(i) === 2) {\n            this.cards = this.cards.concat(cards);\n            for (var j=0; j<this.wilds.length; j++) {\n              var wild = this.wilds[j];\n              if (wild.rank !== -1) {\n                continue;\n              }\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n          }\n        }\n      }\n\n      if (this.cards.length >= 7) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[3].toString().slice(0, -1) + '\\'s & ' + this.cards[5].value + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 7;\n    }\n  }\n\n  class FullHouse extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Full House', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<3; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          break;\n        }\n      }\n\n      if (this.cards.length === 3) {\n        for (i=0; i<this.values.length; i++) {\n          cards = this.values[i];\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n          if (this.getNumCardsByRank(i) >= 2) {\n            this.cards = this.cards.concat(cards || []);\n            for (var j=0; j<this.wilds.length; j++) {\n              var wild = this.wilds[j];\n              if (wild.rank !== -1) {\n                continue;\n              }\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-5));\n            break;\n          }\n        }\n      }\n\n      if (this.cards.length >= 5) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[3].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 5;\n    }\n  }\n\n  class Flush extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Flush', game, canDisqualify);\n    }\n\n    solve() {\n      this.sfLength = 0;\n      this.resetWildCards();\n\n      for (var suit in this.suits) {\n        var cards = this.getCardsForFlush(suit, true);\n        if (cards.length >= this.game.sfQualify) {\n          this.cards = cards;\n          break;\n        }\n      }\n\n      if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + suit + ' High';\n        this.sfLength = this.cards.length;\n        if (this.cards.length < this.game.cardsInHand) {\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-this.cards.length));\n        }\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n  }\n\n  class Straight extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Straight', game, canDisqualify);\n    }\n\n    solve() {\n      var card, checkCards;\n      this.resetWildCards();\n\n      // There are still some games that count the wheel as second highest.\n      // These games do not have enough cards/wilds to make AKQJT and 5432A both possible.\n      if (this.game.wheelStatus === 1) {\n        this.cards = this.getWheel();\n        if (this.cards.length) {\n          var wildCount = 0;\n          for (var i=0; i<this.cards.length; i++) {\n            card = this.cards[i];\n            if (card.value === this.game.wildValue) {\n              wildCount += 1;\n            }\n            if (card.rank === 0) {\n              card.rank = values.indexOf('A');\n              card.wildValue = 'A';\n              if (card.value === '1') {\n                card.value = 'A';\n              }\n            }\n          }\n          this.cards = this.cards.sort(Card.sort);\n          for (; wildCount<this.wilds.length && this.cards.length < this.game.cardsInHand; wildCount++) {\n            card = this.wilds[wildCount];\n            card.rank = values.indexOf('A');\n            card.wildValue = 'A';\n            this.cards.push(card);\n          }\n          this.descr = this.name + ', Wheel';\n          this.sfLength = this.sfQualify;\n          if (this.cards[0].value === 'A') {\n            this.cards = this.cards.concat(this.nextHighest().slice(1, this.game.cardsInHand-this.cards.length+1));\n          } else {\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-this.cards.length));\n          }\n          return true;\n        }\n        this.resetWildCards();\n      }\n\n      this.cards = this.getGaps();\n\n      // Now add the wild cards, if any, and set the appropriate ranks\n      for (var i=0; i<this.wilds.length; i++) {\n        card = this.wilds[i];\n        checkCards = this.getGaps(this.cards.length);\n        if (this.cards.length === checkCards.length) {\n          // This is an \"open-ended\" straight, the high rank is the highest possible rank.\n          if (this.cards[0].rank < (values.length - 1)) {\n            card.rank = this.cards[0].rank + 1;\n            card.wildValue = values[card.rank];\n            this.cards.push(card);\n          } else {\n            card.rank = this.cards[this.cards.length - 1].rank - 1;\n            card.wildValue = values[card.rank];\n            this.cards.push(card);\n          }\n        } else {\n          // This is an \"inside\" straight, the high card doesn't change.\n          for (var j=1; j<this.cards.length; j++) {\n            if (this.cards[j-1].rank - this.cards[j].rank > 1) {\n              card.rank = this.cards[j-1].rank - 1;\n              card.wildValue = values[card.rank];\n              this.cards.push(card);\n              break;\n            }\n          }\n        }\n        this.cards = this.cards.sort(Card.sort);\n      }\n      if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + ' High';\n        this.cards = this.cards.slice(0, this.game.cardsInHand);\n        this.sfLength = this.cards.length;\n        if (this.cards.length < this.game.cardsInHand) {\n          if (this.cards[this.sfLength-1].rank === 0) {\n            this.cards = this.cards.concat(this.nextHighest().slice(1, this.game.cardsInHand-this.cards.length+1));\n          } else {\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-this.cards.length));\n          }\n        }\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n\n    /**\n     * Get the number of gaps in the straight.\n     * @return {Array} Highest potential straight with fewest number of gaps.\n     */\n    getGaps(checkHandLength) {\n      var wildCards, cardsToCheck, i, card, gapCards, cardsList, gapCount, prevCard, diff;\n\n      var stripReturn = Hand.stripWilds(this.cardPool, this.game);\n      wildCards = stripReturn[0];\n      cardsToCheck = stripReturn[1];\n\n      for (i=0; i<cardsToCheck.length; i++) {\n        card = cardsToCheck[i];\n        if (card.wildValue === 'A') {\n          cardsToCheck.push(new Card('1' + card.suit));\n        }\n      }\n      cardsToCheck = cardsToCheck.sort(Card.sort);\n\n      if (checkHandLength) {\n        i = cardsToCheck[0].rank + 1;\n      } else {\n        checkHandLength = this.game.sfQualify;\n        i = values.length;\n      }\n\n      gapCards = [];\n      for (; i>0; i--) {\n        cardsList = [];\n        gapCount = 0;\n        for (var j=0; j<cardsToCheck.length; j++) {\n          card = cardsToCheck[j];\n          if (card.rank > i) {\n            continue;\n          }\n          prevCard = cardsList[cardsList.length - 1];\n          diff = (prevCard) ? prevCard.rank - card.rank : i - card.rank;\n\n          if (diff === null) {\n            cardsList.push(card);\n          } else if (checkHandLength < (gapCount + diff + cardsList.length)) {\n            break;\n          } else if (diff > 0) {\n            cardsList.push(card);\n            gapCount += (diff - 1);\n          }\n        }\n        if (cardsList.length > gapCards.length) {\n          gapCards = cardsList.slice();\n        }\n        if (this.game.sfQualify - gapCards.length <= wildCards.length) {\n          break;\n        }\n      }\n\n      return gapCards;\n    }\n\n    getWheel() {\n      var wildCards, cardsToCheck, i, card, wheelCards, wildCount, cardFound;\n\n      var stripReturn = Hand.stripWilds(this.cardPool, this.game);\n      wildCards = stripReturn[0];\n      cardsToCheck = stripReturn[1];\n\n      for (i=0; i<cardsToCheck.length; i++) {\n        card = cardsToCheck[i];\n        if (card.wildValue === 'A') {\n          cardsToCheck.push(new Card('1' + card.suit));\n        }\n      }\n      cardsToCheck = cardsToCheck.sort(Card.sort);\n\n      wheelCards = [];\n      wildCount = 0;\n      for (i = this.game.sfQualify-1; i>=0; i--) {\n        cardFound = false;\n        for (var j=0; j<cardsToCheck.length; j++) {\n          card = cardsToCheck[j];\n          if (card.rank > i) {\n            continue;\n          }\n          if (card.rank < i) {\n            break;\n          }\n          wheelCards.push(card);\n          cardFound = true;\n          break;\n        }\n        if (!cardFound) {\n          if (wildCount < wildCards.length) {\n            wildCards[wildCount].rank = i;\n            wildCards[wildCount].wildValue = values[i];\n            wheelCards.push(wildCards[wildCount]);\n            wildCount += 1;\n          } else {\n            return [];\n          }\n        }\n      }\n\n      return wheelCards;\n    }\n  }\n\n  class TwoThreeOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Two Three Of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n      for (var i=0; i<this.values.length; i++) {\n        var cards = this.values[i];\n        if (this.cards.length > 0 && this.getNumCardsByRank(i) === 3) {\n          this.cards = this.cards.concat(cards || []);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-6));\n          break;\n        } else if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.cards.concat(cards);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[3].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n  }\n\n  class ThreeOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<3; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-3));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 3) {\n        if (this.game.noKickers) {\n          this.cards.length = 3;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 3;\n    }\n  }\n\n  class ThreePair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        var cards = this.values[i];\n        if (this.cards.length > 2 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-6));\n          break;\n        } else if (this.cards.length > 0 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        } else if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[2].toString().slice(0, -1) + '\\'s & ' + this.cards[4].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n  }\n\n  class TwoPair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Two Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        var cards = this.values[i];\n        if (this.cards.length > 0 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-4));\n          break;\n        } else if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[2].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 4;\n    }\n  }\n\n  class OnePair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(this.values[i] || []);\n          for (var j=0; j<this.wilds.length && this.cards.length<2; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-2));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 2) {\n        if (this.game.noKickers) {\n          this.cards.length = 2;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 2;\n    }\n  }\n\n  class HighCard extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'High Card', game, canDisqualify);\n    }\n\n    solve() {\n      this.cards = this.cardPool.slice(0, this.game.cardsInHand);\n\n      for (var i=0; i<this.cards.length; i++) {\n        var card = this.cards[i];\n        if (this.cards[i].value === this.game.wildValue) {\n          this.cards[i].wildValue = 'A';\n          this.cards[i].rank = values.indexOf('A');\n        }\n      }\n\n      if (this.game.noKickers) {\n        this.cards.length = 1;\n      }\n\n      this.cards = this.cards.sort(Card.sort);\n      this.descr = this.cards[0].toString().slice(0, -1) + ' High';\n\n      return true;\n    }\n  }\n\n  /*\n   * Base class for handling Pai Gow Poker hands.\n   * House Way is in accordance with the MGM Grand Casino, Las Vegas NV.\n   * http://wizardofodds.com/games/pai-gow-poker/house-way/mgm/\n   * EXCEPTION: With Four of a Kind and S/F, preserve the S/F, just like Three of a Kind.\n   */\n  class PaiGowPokerHelper {\n    /*\n     * Constructor class.\n     * @param {Hand} hand Solved hand against Game 'paigowpokerfull'.\n     */\n    constructor(hand) {\n      this.baseHand = null;\n      this.hiHand = null;\n      this.loHand = null;\n      this.game = null;\n      this.loGame = new Game('paigowpokerlo');\n      this.hiGame = new Game('paigowpokerhi');\n\n      if (Array.isArray(hand)) {\n        this.baseHand = Hand.solve(hand, new Game('paigowpokerfull'));\n      } else {\n        this.baseHand = hand;\n      }\n\n      this.game = this.baseHand.game;\n    }\n\n    /*\n     * Set a full hand into high and low hands, according to House Way.\n     */\n    splitHouseWay() {\n      var hiCards, loCards;\n      var rank = this.game.handValues.length - this.baseHand.rank;\n      var handValue = this.game.handValues[rank];\n\n      if (handValue === FiveOfAKind) {\n        if (this.baseHand.cards[5].value === 'K' && this.baseHand.cards[6].value === 'K') {\n          loCards = this.baseHand.cards.slice(5, 7);\n          hiCards = this.baseHand.cards.slice(0, 5);\n        } else {\n          loCards = this.baseHand.cards.slice(0, 2);\n          hiCards = this.baseHand.cards.slice(2, 7);\n        }\n      } else if (handValue === FourOfAKindPairPlus) {\n        if (this.baseHand.cards[0].wildValue === 'A' && this.baseHand.cards[4].value !== 'K') {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        }\n      } else if (handValue === StraightFlush || handValue === Flush || handValue === Straight) {\n        var sfReturn;\n        var altGame = new Game('paigowpokeralt');\n        var altHand = Hand.solve(this.baseHand.cards, altGame);\n        var altRank = altGame.handValues.length - altHand.rank;\n        if (altGame.handValues[altRank] === FourOfAKind) {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        } else if (altGame.handValues[altRank] === FullHouse) {\n          hiCards = altHand.cards.slice(0, 3);\n          loCards = altHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(altHand.cards.slice(5, 7));\n        } else if (altGame.handValues[altRank] === ThreeOfAKind) {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        } else if (altGame.handValues[altRank] === ThreePair) {\n          loCards = altHand.cards.slice(0, 2);\n          hiCards = altHand.cards.slice(2, 7);\n        } else if (altGame.handValues[altRank] === TwoPair) {\n          if (altHand.cards[0].rank < 6) {\n            if (altHand.cards[4].wildValue === 'A') {\n              hiCards = altHand.cards.slice(0, 4);\n              loCards = altHand.cards.slice(4, 6);\n              hiCards.push(altHand.cards[6]);\n            } else {\n              sfReturn = this.getSFData(altHand.cards);\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n            }\n          } else if (altHand.cards[0].rank < 10) {\n            if (altHand.cards[4].wildValue === 'A') {\n              hiCards = altHand.cards.slice(0, 4);\n              loCards = altHand.cards.slice(4, 6);\n              hiCards.push(altHand.cards[6]);\n            } else {\n              hiCards = altHand.cards.slice(0, 2);\n              loCards = altHand.cards.slice(2, 4);\n              hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n            }\n          } else if (altHand.cards[0].wildValue !== 'A' && altHand.cards[2].rank < 6 && altHand.cards[4].wildValue === 'A') {\n            hiCards = altHand.cards.slice(0, 4);\n            loCards = altHand.cards.slice(4, 6);\n            hiCards.push(altHand.cards[6]);\n          } else {\n            hiCards = altHand.cards.slice(0, 2);\n            loCards = altHand.cards.slice(2, 4);\n            hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n          }\n        } else if (altGame.handValues[altRank] === OnePair) {\n          if (altHand.cards[0].rank >= values.indexOf('T') && altHand.cards[0].rank <= values.indexOf('K') && altHand.cards[2].wildValue === 'A') {\n            var possibleSF = altHand.cards.slice(0, 2);\n            possibleSF = possibleSF.concat(altHand.cards.slice(3, 7));\n            sfReturn = this.getSFData(possibleSF);\n            if (sfReturn[0]) {\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n              loCards.push(altHand.cards[2]);\n            } else {\n              hiCards = altHand.cards.slice(0, 2);\n              loCards = altHand.cards.slice(2, 4);\n              hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n            }\n          } else {\n            sfReturn = this.getSFData(altHand.cards.slice(2, 7));\n            if (sfReturn[0]) {\n              hiCards = sfReturn[0];\n              loCards = altHand.cards.slice(0, 2);\n            } else {\n              sfReturn = this.getSFData(altHand.cards);\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n            }\n          }\n        } else {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        }\n      } else if (handValue === FourOfAKind) {\n        if (this.baseHand.cards[0].rank < 6) {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else if (this.baseHand.cards[0].rank < 10 && this.baseHand.cards[4].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        }\n      } else if (handValue === TwoThreeOfAKind) {\n        loCards = this.baseHand.cards.slice(0, 2);\n        hiCards = this.baseHand.cards.slice(3, 6);\n        hiCards.push(this.baseHand.cards[2]);\n        hiCards.push(this.baseHand.cards[6]);\n      } else if (handValue === ThreeOfAKindTwoPair) {\n        hiCards = this.baseHand.cards.slice(0, 3);\n        loCards = this.baseHand.cards.slice(3, 5);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n      } else if (handValue === FullHouse) {\n        if (this.baseHand.cards[3].wildValue === '2' && this.baseHand.cards[5].wildValue === 'A' && this.baseHand.cards[6].wildValue === 'K') {\n          hiCards = this.baseHand.cards.slice(0, 5);\n          loCards = this.baseHand.cards.slice(5, 7);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 3);\n          loCards = this.baseHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n        }\n      } else if (handValue === ThreeOfAKind) {\n        if (this.baseHand.cards[0].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 3);\n          loCards = this.baseHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n        }\n      } else if (handValue === ThreePair) {\n        loCards = this.baseHand.cards.slice(0, 2);\n        hiCards = this.baseHand.cards.slice(2, 7);\n      } else if (handValue === TwoPair) {\n        if (this.baseHand.cards[0].rank < 6) {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else if (this.baseHand.cards[0].rank < 10) {\n          if (this.baseHand.cards[4].wildValue === 'A') {\n            hiCards = this.baseHand.cards.slice(0, 4);\n            loCards = this.baseHand.cards.slice(4, 6);\n            hiCards.push(this.baseHand.cards[6]);\n          } else {\n            hiCards = this.baseHand.cards.slice(0, 2);\n            loCards = this.baseHand.cards.slice(2, 4);\n            hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n          }\n        } else if (this.baseHand.cards[0].wildValue !== 'A' && this.baseHand.cards[2].rank < 6 && this.baseHand.cards[4].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        }\n      } else if (handValue === OnePair) {\n        hiCards = this.baseHand.cards.slice(0, 2);\n        loCards = this.baseHand.cards.slice(2, 4);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n      } else {\n        hiCards = [this.baseHand.cards[0]];\n        loCards = this.baseHand.cards.slice(1, 3);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(3, 7));\n      }\n\n      this.hiHand = Hand.solve(hiCards, this.hiGame);\n      this.loHand = Hand.solve(loCards, this.loGame);\n    }\n\n    /*\n     * Determine the best possible Straight and/or Flush.\n     * @param  {Array} cards 5-7 Card objects to check.\n     * @return {Array} [hiCards, loCards] High and Low components, if any.\n     */\n    getSFData(cards) {\n      var hiCards, possibleLoCards, bestLoCards, bestHand;\n      var handsToCheck = [\n        new StraightFlush(cards, new Game('paigowpokersf7')),\n        new StraightFlush(cards, new Game('paigowpokersf6')),\n        new StraightFlush(cards, this.game),\n        new Flush(cards, new Game('paigowpokersf7')),\n        new Flush(cards, new Game('paigowpokersf6')),\n        new Flush(cards, this.game),\n        new Straight(cards, new Game('paigowpokersf7')),\n        new Straight(cards, new Game('paigowpokersf6')),\n        new Straight(cards, this.game)\n      ];\n\n      for (var i=0; i<handsToCheck.length; i++) {\n        var hand = handsToCheck[i];\n        if (hand.isPossible) {\n          if (hand.sfLength === 7) {\n            possibleLoCards = [hand.cards[0], hand.cards[1]];\n          } else if (hand.sfLength === 6) {\n            possibleLoCards = [hand.cards[0]];\n            if (cards.length > 6) {\n              possibleLoCards.push(hand.cards[6]);\n            }\n          } else if (cards.length > 5) {\n            possibleLoCards = [hand.cards[5]];\n            if (cards.length > 6) {\n              possibleLoCards.push(hand.cards[6]);\n            }\n          }\n          if (possibleLoCards) {\n            possibleLoCards = possibleLoCards.sort(Card.sort);\n            if (!bestLoCards || bestLoCards[0].rank < possibleLoCards[0].rank || (bestLoCards.length > 1 && bestLoCards[0].rank === possibleLoCards[0].rank && bestLoCards[1].rank < possibleLoCards[1].rank)) {\n              bestLoCards = possibleLoCards;\n              bestHand = hand;\n            }\n          } else if (!bestHand) {\n            bestHand = hand;\n            break;\n          }\n        }\n      }\n\n      if (bestHand) {\n        if (bestHand.sfLength === 7) {\n          hiCards = bestHand.cards.slice(2, 7);\n        } else if (bestHand.sfLength === 6) {\n          hiCards = bestHand.cards.slice(1, 6);\n        } else {\n          hiCards = bestHand.cards.slice(0, 5);\n        }\n      }\n\n      return [hiCards, bestLoCards];\n    }\n\n    /*\n     * Determine if the setting of the hands is valid. Hi must be higher than lo.\n     * @return {Boolean}\n     */\n    qualifiesValid() {\n      var compareHands = Hand.winners([this.hiHand, this.loHand]);\n\n      return !(compareHands.length === 1 && compareHands[0] === this.loHand);\n    }\n\n    /**\n     * Find which of two split hands is best, according to rules.\n     * @param  {PaiGowPokerHelper} player Player hand to evaluate. Must be set.\n     * @param  {PaiGowPokerHelper} banker Banker hand to evaluate. Must be set.\n     * @param  {int}               winner Winning party, if any.\n     *                                    Player = 1, Banker = -1, Push = 0\n     */\n    static winners(player, banker) {\n      if (!player.qualifiesValid()) {\n        if (banker.qualifiesValid()) {\n          return -1;\n        }\n        // Probably shouldn't get here because the dealer must set house way.\n        // However, we'll still have it as a sanity check, just in case.\n        return 0;\n      }\n\n      if (!banker.qualifiesValid()) {\n        return 1;\n      }\n\n      var hiWinner = Hand.winners([player.hiHand, banker.hiHand]);\n      var loWinner = Hand.winners([player.loHand, banker.loHand]);\n\n      // In Pai Gow Poker, Banker takes any equal valued hands.\n      if (hiWinner.length === 1 && hiWinner[0] === player.hiHand) {\n        if (loWinner.length === 1 && loWinner[0] === player.loHand) {\n          // Player wins both; player wins\n          return 1;\n        }\n        // Player wins hi, Banker wins lo; push\n        return 0;\n      }\n\n      if (loWinner.length === 1 && loWinner[0] === player.loHand) {\n        // Banker wins hi, Player wins lo; push\n        return 0;\n      }\n\n      // Banker wins both; banker wins\n      return -1;\n    }\n\n    /*\n     * Set a full hand into high and low hands, according to manual input.\n     * @param  {Array} hiHand       High hand to specify.\n     *                              Can also be {Hand} with game of 'paigowpokerhi'.\n     * @param  {Array} loHand       Low hand to specify.\n     *                              Can also be {Hand} with game of 'paigowpokerlo'.\n     * @return {PaiGowPokerHelper}  Object with split hands.\n     */\n    static setHands(hiHand, loHand) {\n      var fullHand = [];\n\n      if (Array.isArray(hiHand)) {\n        hiHand = Hand.solve(hiHand, new Game('paigowpokerhi'));\n      }\n      fullHand = fullHand.concat(hiHand.cardPool);\n      if (Array.isArray(loHand)) {\n        loHand = Hand.solve(loHand, new Game('paigowpokerlo'));\n      }\n      fullHand = fullHand.concat(loHand.cardPool);\n\n      var result = new PaiGowPokerHelper(fullHand);\n      result.hiHand = hiHand;\n      result.loHand = loHand;\n\n      return result;\n    }\n\n    /**\n     * Build and return PaiGowPokerHelper object with hands split House Way.\n     * @param  {Array} fullHand    Array of cards (['Ad', '3c', 'Th', ...]).\n     *                             Can also be {Hand} with game of 'paigowpokerfull'.\n     * @return {PaiGowPokerHelper} Object with split hands.\n     */\n    static solve(fullHand) {\n      var result = new PaiGowPokerHelper(fullHand = fullHand || ['']);\n      result.splitHouseWay();\n\n      return result;\n    }\n  }\n\n  var gameRules = {\n    'standard': {\n      'cardsInHand': 5,\n      'handValues': [StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': null,\n      \"noKickers\": false\n    },\n    'jacksbetter': {\n      'cardsInHand': 5,\n      'handValues': [StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['Jc', 'Jd', '4h', '3s', '2c'],\n      \"noKickers\": true\n    },\n    'joker': {\n      'cardsInHand': 5,\n      'handValues': [NaturalRoyalFlush, FiveOfAKind, WildRoyalFlush, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['4c', '3d', '3h', '2s', '2c'],\n      \"noKickers\": true\n    },\n    'deuceswild': {\n      'cardsInHand': 5,\n      'handValues': [NaturalRoyalFlush, FourWilds, WildRoyalFlush, FiveOfAKind, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, HighCard],\n      'wildValue': '2',\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['5c', '4d', '3h', '3s', '3c'],\n      \"noKickers\": true\n    },\n    'threecard': {\n      'cardsInHand': 3,\n      'handValues': [StraightFlush, ThreeOfAKind, Straight, Flush, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 3,\n      'lowestQualified': ['Qh', '3s', '2c'],\n      \"noKickers\": false\n    },\n    'fourcard': {\n      'cardsInHand': 4,\n      'handValues': [FourOfAKind, StraightFlush, ThreeOfAKind, Flush, Straight, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 4,\n      'lowestQualified': null,\n      \"noKickers\": true\n    },\n    'fourcardbonus': {\n      'cardsInHand': 4,\n      'handValues': [FourOfAKind, StraightFlush, ThreeOfAKind, Flush, Straight, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 4,\n      'lowestQualified': ['Ac', 'Ad', '3h', '2s'],\n      \"noKickers\": true\n    },\n    'paigowpokerfull': {\n      'cardsInHand': 7,\n      'handValues': [FiveOfAKind, FourOfAKindPairPlus, StraightFlush, Flush, Straight, FourOfAKind, TwoThreeOfAKind, ThreeOfAKindTwoPair, FullHouse, ThreeOfAKind, ThreePair, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokeralt': {\n      'cardsInHand': 7,\n      'handValues': [FourOfAKind, FullHouse, ThreeOfAKind, ThreePair, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokersf6': {\n      'cardsInHand': 7,\n      'handValues': [StraightFlush, Flush, Straight],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 6,\n      'lowestQualified': null\n    },\n    'paigowpokersf7': {\n      'cardsInHand': 7,\n      'handValues': [StraightFlush, Flush, Straight],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 7,\n      'lowestQualified': null\n    },\n    'paigowpokerhi': {\n      'cardsInHand': 5,\n      'handValues': [FiveOfAKind, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokerlo': {\n      'cardsInHand': 2,\n      'handValues': [OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    }\n  };\n\n  /**\n   * Base Game class that defines the rules of the game.\n   */\n  class Game {\n    constructor(descr) {\n      this.descr = descr;\n      this.cardsInHand = 0;\n      this.handValues = [];\n      this.wildValue = null;\n      this.wildStatus = 0;\n      this.wheelStatus = 0;\n      this.sfQualify = 5;\n      this.lowestQualified = null;\n      this.noKickers = null;\n\n      // Set values based on the game rules.\n      if (!this.descr || !gameRules[this.descr]) {\n        this.descr = 'standard';\n      }\n      this.cardsInHand = gameRules[this.descr]['cardsInHand'];\n      this.handValues = gameRules[this.descr]['handValues'];\n      this.wildValue = gameRules[this.descr]['wildValue'];\n      this.wildStatus = gameRules[this.descr]['wildStatus'];\n      this.wheelStatus = gameRules[this.descr]['wheelStatus'];\n      this.sfQualify = gameRules[this.descr]['sfQualify'];\n      this.lowestQualified = gameRules[this.descr]['lowestQualified'];\n      this.noKickers = gameRules[this.descr]['noKickers'];\n    }\n  }\n\n  function exportToGlobal(global) {\n    global.Card = Card;\n    global.Hand = Hand;\n    global.Game = Game;\n    global.RoyalFlush = RoyalFlush;\n    global.NaturalRoyalFlush = NaturalRoyalFlush;\n    global.WildRoyalFlush = WildRoyalFlush;\n    global.FiveOfAKind = FiveOfAKind;\n    global.StraightFlush = StraightFlush;\n    global.FourOfAKindPairPlus = FourOfAKindPairPlus;\n    global.FourOfAKind = FourOfAKind;\n    global.FourWilds = FourWilds;\n    global.TwoThreeOfAKind = TwoThreeOfAKind;\n    global.ThreeOfAKindTwoPair = ThreeOfAKindTwoPair;\n    global.FullHouse = FullHouse;\n    global.Flush = Flush;\n    global.Straight = Straight;\n    global.ThreeOfAKind = ThreeOfAKind;\n    global.ThreePair = ThreePair;\n    global.TwoPair = TwoPair;\n    global.OnePair = OnePair;\n    global.HighCard = HighCard;\n    global.PaiGowPokerHelper = PaiGowPokerHelper;\n  }\n\n  // Export the classes for node.js use.\n  if (typeof exports !== 'undefined') {\n    exportToGlobal(exports);\n  }\n\n  // Add the classes to the window for browser use.\n  if (typeof window !== 'undefined') {\n    exportToGlobal(window);\n  }\n\n})();"]},"metadata":{},"sourceType":"script"}